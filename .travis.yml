sudo: false
language: cpp
notifications:
  email: false
branches:
  only:
    - master


matrix:
  fast_finish: true
  include:
#    - name: "xenial gcc-8"
    #      os: linux
    #      dist: xenial
    #      compiler: gcc
    #      env:
    #        - CXX=g++-8 CC=gcc-8
    #        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=native -DBUILD_SHARED_LIBS:BOOL=OFF"
    #        - CMAKE_GEN="Unix Makefiles"
    #      addons:
    #        apt:
    #          update: true
    #          sources:
    #            - sourceline: "ppa:ubuntu-toolchain-r/test"
    #          packages:
    #            - gcc-8
    #            - g++-8
    #            - zlib1g-dev
    #
    #
    #    - name: "xenial clang"
    #      os: linux
    #      dist: xenial
    #      compiler: clang
    #      env:
    #        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=native -DBUILD_SHARED_LIBS:BOOL=OFF"
    #        - CMAKE_GEN="Unix Makefiles"
    #        - CXX=clang++ CC=clang
    #      addons:
    #        apt:
    #          update: true
    #          sources:
    #            - sourceline: "ppa:ubuntu-toolchain-r/test"
    #          packages:
    #            - libstdc++-8-dev
    #            - zlib1g-dev
    #
    #
    #    - name: "bionic gcc"
    #      os: linux
    #      dist: bionic
    #      compiler: gcc
    #      env:
    #        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=native -DBUILD_SHARED_LIBS:BOOL=OFF"
    #        - CMAKE_GEN="Unix Makefiles"
    #
    #    - name: "bionic clang"
    #      os: linux
    #      dist: bionic
    #      compiler: clang
    #      env:
    #        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=native -DBUILD_SHARED_LIBS:BOOL=OFF"
    #        - CMAKE_GEN="Unix Makefiles"
    #
    #    - name: "xenial gcc-8 conda libs"
    #      os: linux
    #      dist: xenial
    #      compiler: gcc
    #      env:
    #        - CXX=g++-8 CC=gcc-8
    #        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=native -DPREFER_CONDA_LIBS:BOOL=ON -DBUILD_SHARED_LIBS:BOOL=OFF"
    #        - CMAKE_GEN="Unix Makefiles"
    #      addons:
    #        apt:
    #          update: true
    #          sources:
    #            - sourceline: "ppa:ubuntu-toolchain-r/test"
    #          packages:
    #            - gcc-8
    #            - g++-8
    #      before_install:
    #        # Here we just install Miniconda, which you shouldn"t have to change.
    #        - wget http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -O miniconda.sh
    #        - chmod +x miniconda.sh
    #        - ./miniconda.sh -b -p $HOME/miniconda
    #        - export PATH=$HOME/miniconda/bin:$PATH
    #        - conda update --yes conda
    #        - conda install --yes hdf5 eigen
    #
    #
    #    - name: "bionic gcc conda-forge libs"
    #      dist: bionic
    #      os: linux
    #      compiler: gcc
    #      env:
    #        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=native -DPREFER_CONDA_LIBS:BOOL=ON -DBUILD_SHARED_LIBS:BOOL=OFF"
    #        - CMAKE_GEN="Unix Makefiles"
    #      before_install:
    #        # Here we just install Miniconda, which you shouldn"t have to change.
    #        - wget http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -O miniconda.sh
    #        - chmod +x miniconda.sh
    #        - ./miniconda.sh -b -p $HOME/miniconda
    #        - export PATH=$HOME/miniconda/bin:$PATH
    #        - conda update --yes conda
    #        - conda config --add channels conda-forge
    #        - conda install --yes hdf5 hdf5-static eigen spdlog
    #
    #
    #    - name: "xenial gcc-8 apt libs"
    #      dist: xenial
    #      os: linux
    #      compiler: gcc
    #      env:
    #        - CXX=g++-8 CC=gcc-8
    #        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=native -DBUILD_SHARED_LIBS:BOOL=OFF"
    #        - CMAKE_GEN="Unix Makefiles"
    #      addons:
    #        apt:
    #          update: true
    #          sources:
    #            - sourceline: "ppa:ubuntu-toolchain-r/test"
    #          packages:
    #            - gcc-8
    #            - g++-8
    #            - libhdf5-dev
    #            - libaec-dev
    #            - libeigen3-dev
    #            - libspdlog-dev
    #
    #    - name: "bionic gcc apt libs"
    #      dist: bionic
    #      os: linux
    #      compiler: gcc
    #      env:
    #        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=native  -DBUILD_SHARED_LIBS:BOOL=OFF"
    #        - CMAKE_GEN="Unix Makefiles"
    #      addons:
    #        apt:
    #          update: true
    #          sources:
    #            - sourceline: "ppa:ubuntu-toolchain-r/test"
    #          packages:
    #            - libhdf5-dev
    #            - libaec-dev
    #            - libeigen3-dev
    #            - libspdlog-dev
    #
    #    - name: "bionic clang conan libs"
    #      dist: bionic
    #      os: linux
    #      compiler: clang
    #      env:
    #        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=conan  -DBUILD_SHARED_LIBS:BOOL=OFF"
    #        - CMAKE_GEN="Unix Makefiles"
    #        - CXX=clang++ CC=clang
    #      before_install:
    #        # Here we just install Miniconda, which you shouldn't have to change.
    #        - wget http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -O miniconda.sh
    #        - chmod +x miniconda.sh
    #        - ./miniconda.sh -b -p $HOME/miniconda
    #        - export PATH=$HOME/miniconda/bin:$PATH
    #        - conda update --yes conda
    #        - conda config --add channels conda-forge
    #        - conda install --yes conan


    #    - name: "Windows gcc"
    #      os: windows
    #      compiler: gcc
    #      env:
    #        - DOWNLOAD_METHOD=conan
    #        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=$DOWNLOAD_METHOD -DBUILD_SHARED_LIBS:BOOL=OFF"
    #        - CMAKE_GEN=Ninja
    #        - export PATH="/c/tools/miniconda3/:/c/tools/miniconda3/Scripts:$PATH"
    #        - export CC="/c/ProgramData/chocolatey/lib/mingw/tools/install/mingw64/bin/x86_64-w64-mingw32-gcc"
    #        - export CXX="/c/ProgramData/chocolatey/lib/mingw/tools/install/mingw64/bin/x86_64-w64-mingw32-g++"
    #      before_install:
    #        - choco upgrade mingw -y
    #        - choco install ninja miniconda3 openssl.light
    #        - cmd.exe /C 'refreshenv'
    #        - conda create -n h5pp python=3.7 --yes
    #        - . activate h5pp
    #        - conda config --add channels conda-forge
    #        - conda install --yes conan
    #        - conan profile new default --detect
    #        - conan profile update settings.compiler.libcxx=libstdc++11 default
    #
    #    - name: "Windows MSVC"
    #      os: windows
    #      env:
    #        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=conan -DBUILD_SHARED_LIBS:BOOL=OFF"
    #        - CMAKE_GEN="NMake Makefiles"
    #        - PATH="/c/tools/miniconda3/:/c/tools/miniconda3/Scripts:$PATH"
    #      before_install:
    #        - choco upgrade mingw -y
    #        - choco install ninja miniconda3 openssl.light
    #        - cmd.exe /C 'refreshenv'
    #        - conda create -n h5pp python=3.7 --yes
    #        - . activate h5pp
    #        - conda config --add channels conda-forge
    #        - conda install --yes conan
    #        - conan profile new default --detect
    #        - conan profile update settings.compiler.libcxx=libstdc++11 default
    #
    #    - name: "Windows clang"
    #      os: windows
    #      compiler: clang
    #      env:
    #        - CC="/c/Program Files/LLVM/bin/clang"
    #        - CXX="/c/Program Files/LLVM/bin/clang++"
    #        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=conan -DBUILD_SHARED_LIBS:BOOL=OFF"
    #        - CMAKE_GEN=Ninja
    #        - PATH="/c/tools/miniconda3/:/c/tools/miniconda3/Scripts:$PATH"
    #      before_install:
    #        - choco upgrade mingw -y
    #        - choco install llvm ninja miniconda3 openssl.light
    #        - cmd.exe /C 'refreshenv'
    #        - conda create -n h5pp python=3.7 --yes
    #        - . activate h5pp
    #        - conda config --add channels conda-forge
    #        - conda install --yes conan
    #        - conan profile new default --detect
    #        - conan profile update settings.compiler.libcxx=libstdc++11 default
    #    - name: "Windows gcc mingw conan"
    #      os: windows
    #      compiler: gcc
    #      env:
    #        - CC="/c/ProgramData/chocolatey/lib/mingw/tools/install/mingw64/bin/x86_64-w64-mingw32-gcc"
    #        - CXX="/c/ProgramData/chocolatey/lib/mingw/tools/install/mingw64/bin/x86_64-w64-mingw32-g++"
    #        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=conan -DBUILD_SHARED_LIBS:BOOL=OFF"
    #        - CMAKE_GEN=Ninja
    #        - PATH="/c/tools/miniconda3/:/c/tools/miniconda3/Scripts:$PATH"
    #      before_install:
    #        - choco upgrade mingw -y
    #        - choco install ninja miniconda3 openssl.light
    #        - cmd.exe /C 'refreshenv'
    #        - conda create -n h5pp python=3.7 --yes
    #        - . activate h5pp
    #        - conda config --add channels conda-forge
    #        - conda install --yes conan
    #        - conan profile new default --detect
    #        - conan profile update settings.compiler.libcxx=libstdc++11 default
    #    - name: "macOS clang conan"
    #      os: osx
    #      compiler: clang
    #      osx_image: xcode11.3
    #      env:
    #        - CC=clang
    #        - CXX=clang++
    #        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=conan -DBUILD_SHARED_LIBS:BOOL=OFF"
    #        - CMAKE_GEN="Unix Makefiles"
    #      addons:
    #        homebrew:
    #          packages:
    #            - conan
    #          update: true
    #
    #    - name: "macOS clang homebrew"
    #      os: osx
    #      compiler: clang
    #      osx_image: xcode11.3
    #      env:
    #        - CC=clang
    #        - CXX=clang++
    #        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=native -DBUILD_SHARED_LIBS:BOOL=ON"
    #        - CMAKE_GEN="Unix Makefiles"
    #      addons:
    #        homebrew:
    #          packages:
    #            - eigen
    #            - spdlog
    #            - zlib
    #            - szip
    #          update: true
    #      before_install:
    #        - brew uninstall hdf5
    #        - brew install hdf5 --build-from-source
    #        - brew link hdf5
    #        - brew link szip

    - name: "Windows MSVC 2017 conan"
      os: windows
      env:
        - DOWNLOAD_METHOD=conan
        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=$DOWNLOAD_METHOD -DBUILD_SHARED_LIBS:BOOL=OFF"
        - CMAKE_GEN="Visual Studio 15 2017"
        - CMAKE_BUILD_TYPE=Release
      cache:
        directories:
          - $HOME/.conan/data

    - name: "Windows MSVC 2019 conan"
      os: windows
      env:
        - DOWNLOAD_METHOD=conan
        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=$DOWNLOAD_METHOD -DBUILD_SHARED_LIBS:BOOL=OFF"
        - CMAKE_GEN="Visual Studio 16 2019"
        - CMAKE_BUILD_TYPE=Release
      cache:
        directories:
          - $HOME/.conan/data


# The pre-install script. On windows it will install conan via chocolatey
before_install:
  - |
    if [[ "${TRAVIS_OS_NAME}" == "windows" ]]; then
      choco install python3 --version 3.7.4
      choco upgrade cmake
      export PATH="/c/Python37:/c/Python37/Scripts:$PATH"
      python -m pip install --upgrade pip
      cmd.exe /C 'refreshenv'
    else
      pip install --user --upgrade pip
    fi
    cmake --version

install:
  - |
    if [[ "${DOWNLOAD_METHOD}" == "conan" ]]; then
      if [[ "${TRAVIS_OS_NAME}" == "windows" ]]; then
        pip install conan
        cmd.exe /C 'refreshenv'
      elif [[ "${TRAVIS_OS_NAME}" =~ linux|osx ]]; then
        pip install --user conan --upgrade
      fi
    fi


# Setup Build
before_script:
  # On windows PATH's do not get set properly because travis does not restart the shell, so we add them manually
  - if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then export PATH=/Users/travis/Library/Python/2.7/bin:$PATH; fi
  - if [[ "${TRAVIS_OS_NAME}" == "windows" ]]; then export PATH=/c/Program\ Files/CMake/bin:$PATH; fi
  - |
    if [[ "${DOWNLOAD_METHOD}" == "conan" ]]; then
      if [[ "${TRAVIS_OS_NAME}" == "windows" ]]; then export PATH=/c/Program\ Files/Conan/conan:$PATH; fi
      conan user
      conan profile new default --detect
      conan profile update settings.compiler.libcxx=libstdc++11 default
    fi
  - if [[ "${COMPILER_CXX}" != "" ]]; then export CXX=${COMPILER_CXX}; fi
  - if [[ "${COMPILER_CC}" != "" ]]; then export CC=${COMPILER_CC}; fi
  - cmake --version
# Build and Test
script:
  # Cmake Build
  - export MAKEFLAGS=-j2
  - cmake --version
  - cmake -E make_directory build/Debug
  - cd build/Debug
  - |
    cmake -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
          -DH5PP_PRINT_INFO:BOOL=ON \
          -DCMAKE_BUILD_TYPE=Debug \
          -DENABLE_TESTS:BOOL=ON \
          -DBUILD_EXAMPLES:BOOL=ON \
           $CMAKE_FLAGS \
          -G "$CMAKE_GEN" \
          -DCMAKE_GENERATOR_PLATFORM=x64 \
          ../../
  - cmake --build . --target all  --parallel
  - cmake --build . --target install
  - ctest --output-on-failure


after_failure:
  - cat CMakeFiles/CMakeError.log
