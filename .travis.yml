sudo: false
language: cpp
notifications:
  email: false
branches:
  only:
    - master


matrix:
  fast_finish: true
  include:
    - name: "xenial gcc-8"
      os: linux
      dist: xenial
      compiler: gcc
      env:
        - CXX=g++-8 CC=gcc-8
        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=native -DBUILD_SHARED_LIBS:BOOL=OFF"
        - CMAKE_GEN="Unix Makefiles"
      addons:
        apt:
          update: true
          sources:
            - sourceline: "ppa:ubuntu-toolchain-r/test"
          packages:
            - gcc-8
            - g++-8
            - zlib1g-dev
      cache:
        directories:
          - $TRAVIS_BUILD_DIR/build/Debug/install

    - name: "xenial clang"
      os: linux
      dist: xenial
      compiler: clang
      env:
        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=native -DBUILD_SHARED_LIBS:BOOL=OFF"
        - CMAKE_GEN="Unix Makefiles"
        - CXX=clang++ CC=clang
      addons:
        apt:
          update: true
          sources:
            - sourceline: "ppa:ubuntu-toolchain-r/test"
          packages:
            - libstdc++-8-dev
            - zlib1g-dev
      cache:
        directories:
          - $TRAVIS_BUILD_DIR/build/Debug/install

    - name: "bionic gcc"
      os: linux
      dist: bionic
      compiler: gcc
      env:
        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=native -DBUILD_SHARED_LIBS:BOOL=OFF"
        - CMAKE_GEN="Unix Makefiles"
      cache:
        directories:
          - $TRAVIS_BUILD_DIR/build/Debug/install

    - name: "bionic clang"
      os: linux
      dist: bionic
      compiler: clang
      env:
        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=native -DBUILD_SHARED_LIBS:BOOL=OFF"
        - CMAKE_GEN="Unix Makefiles"
      cache:
        directories:
          - $TRAVIS_BUILD_DIR/build/Debug/install

    - name: "xenial gcc-8 conda libs"
      os: linux
      dist: xenial
      compiler: gcc
      env:
        - DOWNLOAD_METHOD=conan
        - CXX=g++-8 CC=gcc-8
        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=$DOWNLOAD_METHOD -DPREFER_CONDA_LIBS:BOOL=ON -DBUILD_SHARED_LIBS:BOOL=OFF"
        - CMAKE_GEN="Unix Makefiles"
        - DOWNLOAD_METHOD=conan
        - CONDA_PACKAGES="hdf5 hdf5-static eigen spdlog"
      addons:
        apt:
          update: true
          sources:
            - sourceline: "ppa:ubuntu-toolchain-r/test"
          packages:
            - gcc-8
            - g++-8


    - name: "bionic gcc conda libs"
      dist: bionic
      os: linux
      compiler: gcc
      env:
        - DOWNLOAD_METHOD=native
        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=$DOWNLOAD_METHOD -DPREFER_CONDA_LIBS:BOOL=ON -DBUILD_SHARED_LIBS:BOOL=OFF"
        - CMAKE_GEN="Unix Makefiles"
        - CONDA_PACKAGES="hdf5 hdf5-static eigen spdlog"


    - name: "xenial gcc-8 apt libs"
      dist: xenial
      os: linux
      compiler: gcc
      env:
        - DOWNLOAD_METHOD=native
        - CXX=g++-8 CC=gcc-8
        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=$DOWNLOAD_METHOD -DBUILD_SHARED_LIBS:BOOL=OFF"
        - CMAKE_GEN="Unix Makefiles"
      addons:
        apt:
          update: true
          sources:
            - sourceline: "ppa:ubuntu-toolchain-r/test"
          packages:
            - gcc-8
            - g++-8
            - libhdf5-dev
            - libaec-dev
            - libeigen3-dev
            - libspdlog-dev

    - name: "bionic gcc apt libs"
      dist: bionic
      os: linux
      compiler: gcc
      env:
        - DOWNLOAD_METHOD=native
        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=$DOWNLOAD_METHOD  -DBUILD_SHARED_LIBS:BOOL=OFF"
        - CMAKE_GEN="Unix Makefiles"
      addons:
        apt:
          update: true
          sources:
            - sourceline: "ppa:ubuntu-toolchain-r/test"
          packages:
            - libhdf5-dev
            - libaec-dev
            - libeigen3-dev
            - libspdlog-dev

    - name: "bionic clang conan libs"
      dist: bionic
      os: linux
      compiler: clang
      env:
        - DOWNLOAD_METHOD=conan
        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=$DOWNLOAD_METHOD  -DBUILD_SHARED_LIBS:BOOL=OFF"
        - CMAKE_GEN="Unix Makefiles"
        - CXX=clang++ CC=clang

    - name: "osx clang conan"
      os: osx
      compiler: clang
      osx_image: xcode11.3
      env:
        - CC=clang
        - CXX=clang++
        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=conan -DBUILD_SHARED_LIBS:BOOL=OFF"
        - CMAKE_GEN="Unix Makefiles"
        - DOWNLOAD_METHOD=conan
      cache:
        directories:
          - $HOME/.conan/data
      addons:
        homebrew:
          packages:
            - conan

    - name: "osx clang native"
      os: osx
      compiler: clang
      osx_image: xcode11.3
      env:
        - CC=clang
        - CXX=clang++
        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=native -DBUILD_SHARED_LIBS:BOOL=OFF"
        - CMAKE_GEN="Unix Makefiles"
      cache:
        directories:
          - $TRAVIS_BUILD_DIR/build/Debug/install

    - name: "osx clang native (+homebrew)"
      os: osx
      compiler: clang
      osx_image: xcode11.3
      env:
        - CC=clang
        - CXX=clang++
        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=native -DBUILD_SHARED_LIBS:BOOL=ON"
        - CMAKE_GEN="Unix Makefiles"
      addons:
        homebrew:
          packages:
            - eigen
            - hdf5
            - spdlog
            - zlib
            - szip


    - name: "windows msvc 2017 conan"
      os: windows
      env:
        - DOWNLOAD_METHOD=conan
        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=$DOWNLOAD_METHOD -DBUILD_SHARED_LIBS:BOOL=OFF"
        - CMAKE_GEN="Visual Studio 15 2017"
        - CMAKE_PLATFORM=x64
      cache:
        directories:
          - $HOME/.conan/data

    - name: "windows msvc 2017 native"
      os: windows
      env:
        - DOWNLOAD_METHOD=native
        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=$DOWNLOAD_METHOD -DBUILD_SHARED_LIBS:BOOL=OFF"
        - CMAKE_GEN="Visual Studio 15 2017"
        - CMAKE_PLATFORM=x64
      cache:
        directories:
          - $TRAVIS_BUILD_DIR/build/Debug/install

# The pre-install script. On windows it will install conan via chocolatey
before_install:
  - |
    if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
      choco upgrade cmake
      if [[ "$DOWNLOAD_METHOD" == "conan" ]]; then
        choco install python3 --version 3.7.4
        export PATH="/c/Python37:/c/Python37/Scripts:$PATH"
        python -m pip install --upgrade pip
      fi
      cmd.exe /C 'refreshenv'
    elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      export PATH=/Users/travis/Library/Python/2.7/bin:$PATH
    else
      pip install --user --upgrade pip
    fi
    cmake --version

install:
  - |
    if [[ "$DOWNLOAD_METHOD" == "conan" ]]; then
      if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
        pip install conan
        cmd.exe /C 'refreshenv'
        export PATH=/c/Program\ Files/Conan/conan:$PATH
      elif [[ "$TRAVIS_OS_NAME" =~ linux|osx ]]; then
        pip install --user conan --upgrade
      fi
    fi


# Setup Build
before_script:
  # On windows PATH's do not get set properly because travis does not restart the shell, so we add them manually
  - |

    if [[ "$DOWNLOAD_METHOD" == "conan" ]]; then
      conan user
      conan profile new default --detect
      conan profile update settings.compiler.libcxx=libstdc++11 default
    fi
    if [[ $CONDA_PACKAGES ]] && [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      # Here we just install Miniconda
      wget http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -O miniconda.sh
      chmod +x miniconda.sh
      ./miniconda.sh -b -p $HOME/miniconda
      export PATH=$HOME/miniconda/bin:$PATH
      conda update --yes conda
      conda config --add channels conda-forge
      conda install --yes ${CONDA_PACKAGES}
    fi

  - cmake --version
# Build and Test
script:
  # Cmake Build
  - export MAKEFLAGS=-j2
  - cmake --version
  - cmake -E make_directory build/Debug
  - cd build/Debug
  - |
    cmake -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
          -DH5PP_PRINT_INFO:BOOL=ON \
          -DCMAKE_BUILD_TYPE=Debug \
          -DENABLE_TESTS:BOOL=ON \
          -DBUILD_EXAMPLES:BOOL=ON \
           $CMAKE_FLAGS \
          -G "$CMAKE_GEN" \
          -DCMAKE_GENERATOR_PLATFORM=$CMAKE_PLATFORM \
          ../../
  - cmake --build . --parallel
  - cmake --build . --target install
  - ctest -C Debug --output-on-failure


after_failure:
  - cat CMakeFiles/CMakeError.log
