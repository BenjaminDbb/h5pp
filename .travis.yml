sudo: false
language: cpp
notifications:
  email: false
branches:
  only:
    - master


matrix:
  fast_finish: true
  include:
    - name: "xenial gcc-8"
      os: linux
      dist: xenial
      compiler: gcc
      env:
        - CXX=g++-8 CC=gcc-8
        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=native -DBUILD_SHARED_LIBS:BOOL=OFF"
        - CMAKE_GEN="Unix Makefiles"
      addons:
        apt:
          update: true
          sources:
            - sourceline: "ppa:ubuntu-toolchain-r/test"
          packages:
            - gcc-8
            - g++-8
            - zlib1g-dev


    - name: "xenial clang"
      os: linux
      dist: xenial
      compiler: clang
      env:
        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=native -DBUILD_SHARED_LIBS:BOOL=OFF"
        - CMAKE_GEN="Unix Makefiles"
        - CXX=clang++ CC=clang
      addons:
        apt:
          update: true
          sources:
            - sourceline: "ppa:ubuntu-toolchain-r/test"
          packages:
            - libstdc++-8-dev
            - zlib1g-dev


    - name: "bionic gcc"
      os: linux
      dist: bionic
      compiler: gcc
      env:
        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=native -DBUILD_SHARED_LIBS:BOOL=OFF"
        - CMAKE_GEN="Unix Makefiles"

    - name: "bionic clang"
      os: linux
      dist: bionic
      compiler: clang
      env:
        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=native -DBUILD_SHARED_LIBS:BOOL=OFF"
        - CMAKE_GEN="Unix Makefiles"

    - name: "xenial gcc-8 conda libs"
      os: linux
      dist: xenial
      compiler: gcc
      env:
        - CXX=g++-8 CC=gcc-8
        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=native -DPREFER_CONDA_LIBS:BOOL=ON -DBUILD_SHARED_LIBS:BOOL=OFF"
        - CMAKE_GEN="Unix Makefiles"
      addons:
        apt:
          update: true
          sources:
            - sourceline: "ppa:ubuntu-toolchain-r/test"
          packages:
            - gcc-8
            - g++-8
      before_install:
        # Here we just install Miniconda, which you shouldn"t have to change.
        - wget http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -O miniconda.sh
        - chmod +x miniconda.sh
        - ./miniconda.sh -b -p $HOME/miniconda
        - export PATH=$HOME/miniconda/bin:$PATH
        - conda update --yes conda
        - conda install --yes hdf5 eigen


    - name: "bionic gcc conda-forge libs"
      dist: bionic
      os: linux
      compiler: gcc
      env:
        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=native -DPREFER_CONDA_LIBS:BOOL=ON -DBUILD_SHARED_LIBS:BOOL=OFF"
        - CMAKE_GEN="Unix Makefiles"
      before_install:
        # Here we just install Miniconda, which you shouldn"t have to change.
        - wget http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -O miniconda.sh
        - chmod +x miniconda.sh
        - ./miniconda.sh -b -p $HOME/miniconda
        - export PATH=$HOME/miniconda/bin:$PATH
        - conda update --yes conda
        - conda config --add channels conda-forge
        - conda install --yes hdf5 hdf5-static eigen spdlog


    - name: "xenial gcc-8 apt libs"
      dist: xenial
      os: linux
      compiler: gcc
      env:
        - CXX=g++-8 CC=gcc-8
        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=native -DBUILD_SHARED_LIBS:BOOL=OFF"
        - CMAKE_GEN="Unix Makefiles"
      addons:
        apt:
          update: true
          sources:
            - sourceline: "ppa:ubuntu-toolchain-r/test"
          packages:
            - gcc-8
            - g++-8
            - libhdf5-dev
            - libaec-dev
            - libeigen3-dev
            - libspdlog-dev

    - name: "bionic gcc apt libs"
      dist: bionic
      os: linux
      compiler: gcc
      env:
        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=native  -DBUILD_SHARED_LIBS:BOOL=OFF"
        - CMAKE_GEN="Unix Makefiles"
      addons:
        apt:
          update: true
          sources:
            - sourceline: "ppa:ubuntu-toolchain-r/test"
          packages:
            - libhdf5-dev
            - libaec-dev
            - libeigen3-dev
            - libspdlog-dev

    - name: "bionic clang conan libs"
      dist: bionic
      os: linux
      compiler: clang
      env:
        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=conan  -DBUILD_SHARED_LIBS:BOOL=OFF"
        - CMAKE_GEN="Unix Makefiles"
        - CXX=clang++ CC=clang
      before_install:
        # Here we just install Miniconda, which you shouldn't have to change.
        - wget http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -O miniconda.sh
        - chmod +x miniconda.sh
        - ./miniconda.sh -b -p $HOME/miniconda
        - export PATH=$HOME/miniconda/bin:$PATH
        - conda update --yes conda
        - conda config --add channels conda-forge
        - conda install --yes conan

    - name: "Windows gcc"
      os: windows
      compiler: gcc
      env:
        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=conan -DBUILD_SHARED_LIBS:BOOL=OFF"
        - CMAKE_GEN=Ninja
      before_install:
        - pip install conan
        - choco install ninja

    - name: "Windows clang"
      os: windows
      compiler: clang
      env:
        - CC="/c/Program Files/LLVM/bin/clang"
        - CXX="/c/Program Files/LLVM/bin/clang++"
        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=conan -DBUILD_SHARED_LIBS:BOOL=OFF"
        - CMAKE_GEN=Ninja
      before_install:
        - pip install conan
        - choco install ninja
        - choco upgrade llvm -y

    - name: "Windows gcc mingw"
      os: windows
      compiler: gcc
      env:
        - CC="/c/ProgramData/chocolatey/lib/mingw/tools/install/mingw64/bin/x86_64-w64-mingw32-gcc"
        - CXX="/c/ProgramData/chocolatey/lib/mingw/tools/install/mingw64/bin/x86_64-w64-mingw32-g++"
        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=conan -DBUILD_SHARED_LIBS:BOOL=OFF"
        - CMAKE_GEN=Ninja
      before_install:
        - choco install ninja
        - choco upgrade mingw -y
        - choco install miniconda3 --params="'/AddToPath:1'"
        - conda update --yes conda
        - conda config --add channels conda-forge
        - conda install --yes conan

    - name: "macOS clang homebrew"
      os: osx
      compiler: clang
      osx_image: xcode11
      env:
        - CC=clang
        - CXX=clang++
        - CMAKE_FLAGS="-DDOWNLOAD_METHOD=conan -DBUILD_SHARED_LIBS:BOOL=OFF"
        - CMAKE_GEN="Unix Makefiles"
      addons:
        homebrew:
          packages:
            - conan
          update: true


script:
  - export MAKEFLAGS=-j2
  - cmake -E make_directory build/Debug
  - cd build/Debug
  - cmake -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DH5PP_PRINT_INFO:BOOL=ON -DCMAKE_BUILD_TYPE=Debug -DENABLE_TESTS:BOOL=ON -DBUILD_EXAMPLES:BOOL=ON $CMAKE_FLAGS -G "$CMAKE_GEN" ../../
  - cmake --build . --target all  -- -j2
  - cmake --build . --target install
  - ctest --output-on-failure


after_failure:
  - cat CMakeFiles/CMakeError.log
