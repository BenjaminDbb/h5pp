<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespaceh5pp_1_1util" kind="namespace" language="C++">
    <compoundname>h5pp::util</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceh5pp_1_1util_1ae6c73a0989d482fb452c89d604c1adee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string h5pp::util::safe_str</definition>
        <argsstring>(std::string_view str)</argsstring>
        <name>safe_str</name>
        <param>
          <type>std::string_view</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" line="12" column="24" bodyfile="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" bodystart="12" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="namespaceh5pp_1_1util_1a90249541d4ff96184cf875393059b57d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classh5pp_1_1hid_1_1h5t" kindref="compound">hid::h5t</ref></type>
        <definition>hid::h5t h5pp::util::getH5Type</definition>
        <argsstring>()</argsstring>
        <name>getH5Type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" line="28" column="15" bodyfile="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" bodystart="28" bodyend="92"/>
        <references refid="namespaceh5pp_1a1916ac19846807673af32b055bb98af4" compoundref="h5pp_format_8h" startline="49" endline="66">h5pp::format</references>
        <references refid="namespaceh5pp_1_1type_1_1compound_1aa6d20d609d54cc8799d142ca54acf9d5" compoundref="h5pp_type_compound_8h" startline="7">h5pp::type::compound::H5T_COMPLEX_SHORT</references>
        <references refid="namespaceh5pp_1_1type_1_1compound_1a72d333146d79727000434d8df8090771" compoundref="h5pp_type_compound_8h" startline="8">h5pp::type::compound::H5T_COMPLEX_INT</references>
        <references refid="namespaceh5pp_1_1type_1_1compound_1a226386f8edeba333cc587a196b28afc4" compoundref="h5pp_type_compound_8h" startline="9">h5pp::type::compound::H5T_COMPLEX_LONG</references>
        <references refid="namespaceh5pp_1_1type_1_1compound_1a910b7f32f6e2ca31fc90d8348a585b48" compoundref="h5pp_type_compound_8h" startline="10">h5pp::type::compound::H5T_COMPLEX_LLONG</references>
        <references refid="namespaceh5pp_1_1type_1_1compound_1acc918db007bccfde363dd0b77fa3b3ea" compoundref="h5pp_type_compound_8h" startline="11">h5pp::type::compound::H5T_COMPLEX_USHORT</references>
        <references refid="namespaceh5pp_1_1type_1_1compound_1a3b9789ae80ef3ba9d4bd3fde5daa7580" compoundref="h5pp_type_compound_8h" startline="12">h5pp::type::compound::H5T_COMPLEX_UINT</references>
        <references refid="namespaceh5pp_1_1type_1_1compound_1a50673b0f6565904d494f414efa594a90" compoundref="h5pp_type_compound_8h" startline="13">h5pp::type::compound::H5T_COMPLEX_ULONG</references>
        <references refid="namespaceh5pp_1_1type_1_1compound_1aaeef3b17e9cf410cc117e10361dec982" compoundref="h5pp_type_compound_8h" startline="14">h5pp::type::compound::H5T_COMPLEX_ULLONG</references>
        <references refid="namespaceh5pp_1_1type_1_1compound_1a268dc8b7924bd1178fa52083a4f56ca6" compoundref="h5pp_type_compound_8h" startline="15">h5pp::type::compound::H5T_COMPLEX_DOUBLE</references>
        <references refid="namespaceh5pp_1_1type_1_1compound_1a2a152b65b67a662acb0ec9abc19987e7" compoundref="h5pp_type_compound_8h" startline="16">h5pp::type::compound::H5T_COMPLEX_LDOUBLE</references>
        <references refid="namespaceh5pp_1_1type_1_1compound_1acdf182c37fd898aa2050a69341e581f9" compoundref="h5pp_type_compound_8h" startline="17">h5pp::type::compound::H5T_COMPLEX_FLOAT</references>
        <references refid="namespaceh5pp_1_1type_1_1compound_1a4b2f7636f376661adaff16511bb5c8aa" compoundref="h5pp_type_compound_8h" startline="18">h5pp::type::compound::H5T_SCALAR2_SHORT</references>
        <references refid="namespaceh5pp_1_1type_1_1compound_1a1ecf4c9b8351f394b4729b1444746054" compoundref="h5pp_type_compound_8h" startline="19">h5pp::type::compound::H5T_SCALAR2_INT</references>
        <references refid="namespaceh5pp_1_1type_1_1compound_1ad6a6f13c0be2677b8b96967803488f5a" compoundref="h5pp_type_compound_8h" startline="20">h5pp::type::compound::H5T_SCALAR2_LONG</references>
        <references refid="namespaceh5pp_1_1type_1_1compound_1ad04233950f53c5c654d6fb6a4d90629f" compoundref="h5pp_type_compound_8h" startline="21">h5pp::type::compound::H5T_SCALAR2_LLONG</references>
        <references refid="namespaceh5pp_1_1type_1_1compound_1a0138ed96c7133dd3bd56d937af3985b5" compoundref="h5pp_type_compound_8h" startline="22">h5pp::type::compound::H5T_SCALAR2_USHORT</references>
        <references refid="namespaceh5pp_1_1type_1_1compound_1a9ccebced1010fb62d3a35fc69cd2adc0" compoundref="h5pp_type_compound_8h" startline="23">h5pp::type::compound::H5T_SCALAR2_UINT</references>
        <references refid="namespaceh5pp_1_1type_1_1compound_1a9c766aa225eb8c4d7543aa5f7408c086" compoundref="h5pp_type_compound_8h" startline="24">h5pp::type::compound::H5T_SCALAR2_ULONG</references>
        <references refid="namespaceh5pp_1_1type_1_1compound_1a3b6158b5eb9ff628af36cb4559c9c2f5" compoundref="h5pp_type_compound_8h" startline="25">h5pp::type::compound::H5T_SCALAR2_ULLONG</references>
        <references refid="namespaceh5pp_1_1type_1_1compound_1a1c47191f5d60443d9741bcbef499fddb" compoundref="h5pp_type_compound_8h" startline="26">h5pp::type::compound::H5T_SCALAR2_DOUBLE</references>
        <references refid="namespaceh5pp_1_1type_1_1compound_1af6e1d6fb81c76e3016d534b520534925" compoundref="h5pp_type_compound_8h" startline="27">h5pp::type::compound::H5T_SCALAR2_LDOUBLE</references>
        <references refid="namespaceh5pp_1_1type_1_1compound_1aa9295211544b40b36fbb1f0d4cb236df" compoundref="h5pp_type_compound_8h" startline="28">h5pp::type::compound::H5T_SCALAR2_FLOAT</references>
        <references refid="namespaceh5pp_1_1type_1_1compound_1a4eede90bae7e6f505d0b67a88d52d560" compoundref="h5pp_type_compound_8h" startline="29">h5pp::type::compound::H5T_SCALAR3_SHORT</references>
        <references refid="namespaceh5pp_1_1type_1_1compound_1a34d3d8da125027f7ab408abd16ee4e54" compoundref="h5pp_type_compound_8h" startline="30">h5pp::type::compound::H5T_SCALAR3_INT</references>
        <references refid="namespaceh5pp_1_1type_1_1compound_1a0561544bc67849285c89c06a660c03ad" compoundref="h5pp_type_compound_8h" startline="31">h5pp::type::compound::H5T_SCALAR3_LONG</references>
        <references refid="namespaceh5pp_1_1type_1_1compound_1a33208b742da16646b519eeae5711692c" compoundref="h5pp_type_compound_8h" startline="32">h5pp::type::compound::H5T_SCALAR3_LLONG</references>
        <references refid="namespaceh5pp_1_1type_1_1compound_1a2eecc3b85070927f9bb8bd05843df0a1" compoundref="h5pp_type_compound_8h" startline="33">h5pp::type::compound::H5T_SCALAR3_USHORT</references>
        <references refid="namespaceh5pp_1_1type_1_1compound_1acbb546754f0cf3e93325cd33e7d4c4b8" compoundref="h5pp_type_compound_8h" startline="34">h5pp::type::compound::H5T_SCALAR3_UINT</references>
        <references refid="namespaceh5pp_1_1type_1_1compound_1a33550956053a2cac47b039049dd9d679" compoundref="h5pp_type_compound_8h" startline="35">h5pp::type::compound::H5T_SCALAR3_ULONG</references>
        <references refid="namespaceh5pp_1_1type_1_1compound_1a33093680e829f1a39c80b95e81a0d1f0" compoundref="h5pp_type_compound_8h" startline="36">h5pp::type::compound::H5T_SCALAR3_ULLONG</references>
        <references refid="namespaceh5pp_1_1type_1_1compound_1acb2433bdbc762d670458099a35882564" compoundref="h5pp_type_compound_8h" startline="37">h5pp::type::compound::H5T_SCALAR3_DOUBLE</references>
        <references refid="namespaceh5pp_1_1type_1_1compound_1ae654aca670b1ad62bc4f787e55f8cd9c" compoundref="h5pp_type_compound_8h" startline="38">h5pp::type::compound::H5T_SCALAR3_LDOUBLE</references>
        <references refid="namespaceh5pp_1_1type_1_1compound_1a1e0f70c73399d9342a8e7ff5cbae15bf" compoundref="h5pp_type_compound_8h" startline="39">h5pp::type::compound::H5T_SCALAR3_FLOAT</references>
      </memberdef>
      <memberdef kind="function" id="namespaceh5pp_1_1util_1a6b73eed6ac24acd251fae5bd9353738d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataType</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>size</declname>
            <defname>size</defname>
          </param>
        </templateparamlist>
        <type>constexpr size_t</type>
        <definition>constexpr size_t h5pp::util::getArraySize</definition>
        <argsstring>([[maybe_unused]] const DataType(&amp;arr)[size], [[maybe_unused]] bool countChars=false)</argsstring>
        <name>getArraySize</name>
        <param>
          <attributes>[[maybe_unused]</attributes>
          <type>] const DataType(&amp;)</type>
          <declname>arr</declname>
          <array>[size]</array>
        </param>
        <param>
          <attributes>[[maybe_unused]</attributes>
          <type>] bool</type>
          <declname>countChars</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" line="95" column="23" bodyfile="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" bodystart="95" bodyend="104"/>
        <references refid="namespaceh5pp_1a1916ac19846807673af32b055bb98af4" compoundref="h5pp_format_8h" startline="49" endline="66">h5pp::format</references>
      </memberdef>
      <memberdef kind="function" id="namespaceh5pp_1_1util_1a9c6370a9272f61844213254d2dac2715" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataType</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>rows</declname>
            <defname>rows</defname>
          </param>
          <param>
            <type>size_t</type>
            <declname>cols</declname>
            <defname>cols</defname>
          </param>
        </templateparamlist>
        <type>constexpr std::array&lt; size_t, 2 &gt;</type>
        <definition>constexpr std::array&lt;size_t, 2&gt; h5pp::util::getArraySize</definition>
        <argsstring>([[maybe_unused]] const DataType(&amp;arr)[rows][cols])</argsstring>
        <name>getArraySize</name>
        <param>
          <attributes>[[maybe_unused]</attributes>
          <type>] const DataType(&amp;)</type>
          <declname>arr</declname>
          <array>[rows][cols]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" line="106" column="27" bodyfile="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" bodystart="106" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="namespaceh5pp_1_1util_1a9229eee1bf35278a380c831357a16819" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataType</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>rows</declname>
            <defname>rows</defname>
          </param>
          <param>
            <type>size_t</type>
            <declname>cols</declname>
            <defname>cols</defname>
          </param>
          <param>
            <type>size_t</type>
            <declname>depth</declname>
            <defname>depth</defname>
          </param>
        </templateparamlist>
        <type>constexpr std::array&lt; size_t, 3 &gt;</type>
        <definition>constexpr std::array&lt;size_t, 3&gt; h5pp::util::getArraySize</definition>
        <argsstring>([[maybe_unused]] const DataType(&amp;arr)[rows][cols][depth])</argsstring>
        <name>getArraySize</name>
        <param>
          <attributes>[[maybe_unused]</attributes>
          <type>] const DataType(&amp;)</type>
          <declname>arr</declname>
          <array>[rows][cols][depth]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" line="110" column="27" bodyfile="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" bodystart="110" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="namespaceh5pp_1_1util_1a7b782dfa72ad4bb7d929a453af051d68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataType</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;not std::is_base_of_v&lt;hid::hid_base&lt;DataType&gt;, DataType&gt;&gt;</defval>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;<ref refid="namespaceh5pp_1_1type_1_1sfinae_1a49f926f789066101b5bc371e8c751507" kindref="member">h5pp::type::sfinae::is_text_v</ref>&lt;DataType&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t h5pp::util::getCharArraySize</definition>
        <argsstring>(const DataType &amp;data, [[maybe_unused]] bool countChars=true)</argsstring>
        <name>getCharArraySize</name>
        <param>
          <type>const DataType &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <attributes>[[maybe_unused]</attributes>
          <type>] bool</type>
          <declname>countChars</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" line="117" column="13" bodyfile="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" bodystart="117" bodyend="125"/>
        <references refid="namespaceh5pp_1a1916ac19846807673af32b055bb98af4" compoundref="h5pp_format_8h" startline="49" endline="66">h5pp::format</references>
      </memberdef>
      <memberdef kind="function" id="namespaceh5pp_1_1util_1a987e926a0a32d8eb4a901ec473eaf7a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IntegralOrIterableType</type>
            <defval>std::initializer_list&lt;hsize_t&gt;</defval>
          </param>
          <param>
            <type>typename</type>
            <defval><ref refid="namespaceh5pp_1_1type_1_1sfinae_1a6c89cafb27bb29455e315a568f02d689" kindref="member">h5pp::type::sfinae::enable_if_is_integral_iterable_or_num</ref>&lt;IntegralOrIterableType&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::vector&lt; hsize_t &gt;</type>
        <definition>std::vector&lt;hsize_t&gt; h5pp::util::getDimVector</definition>
        <argsstring>(const IntegralOrIterableType &amp;iterable)</argsstring>
        <name>getDimVector</name>
        <param>
          <type>const IntegralOrIterableType &amp;</type>
          <declname>iterable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" line="129" column="18" bodyfile="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" bodystart="129" bodyend="142"/>
        <references refid="namespaceh5pp_1a1916ac19846807673af32b055bb98af4" compoundref="h5pp_format_8h" startline="49" endline="66">h5pp::format</references>
      </memberdef>
      <memberdef kind="function" id="namespaceh5pp_1_1util_1acf85b1dee38b0270a8c567a85d0047dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IntegralOrIterableOrOptType</type>
            <defval>std::initializer_list&lt;hsize_t&gt;</defval>
          </param>
          <param>
            <type>typename</type>
            <defval><ref refid="namespaceh5pp_1_1type_1_1sfinae_1aca51c26f66e359d4e98c2c79f5c862af" kindref="member">h5pp::type::sfinae::enable_if_is_integral_iterable_or_nullopt</ref>&lt;IntegralOrIterableOrOptType&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::optional&lt; std::vector&lt; hsize_t &gt; &gt;</type>
        <definition>std::optional&lt;std::vector&lt;hsize_t&gt; &gt; h5pp::util::getOptionalDimVector</definition>
        <argsstring>(const IntegralOrIterableOrOptType &amp;iterable)</argsstring>
        <name>getOptionalDimVector</name>
        <param>
          <type>const IntegralOrIterableOrOptType &amp;</type>
          <declname>iterable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" line="146" column="20" bodyfile="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" bodystart="146" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="namespaceh5pp_1_1util_1a75a70ac870194ad17968d2e180936bc2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>hsize_t</type>
        <definition>hsize_t h5pp::util::getSizeFromDimensions</definition>
        <argsstring>(const std::vector&lt; hsize_t &gt; &amp;dims)</argsstring>
        <name>getSizeFromDimensions</name>
        <param>
          <type>const std::vector&lt; hsize_t &gt; &amp;</type>
          <declname>dims</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" line="153" column="21" bodyfile="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" bodystart="153" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="namespaceh5pp_1_1util_1aa8efa111edbaaac102e0bd279dc08a11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataType</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;not std::is_base_of_v&lt;hid::hid_base&lt;DataType&gt;, DataType&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>hsize_t</type>
        <definition>hsize_t h5pp::util::getSize</definition>
        <argsstring>(const DataType &amp;data)</argsstring>
        <name>getSize</name>
        <param>
          <type>const DataType &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" line="158" column="14" bodyfile="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" bodystart="158" bodyend="165"/>
        <references refid="namespaceh5pp_1a1916ac19846807673af32b055bb98af4" compoundref="h5pp_format_8h" startline="49" endline="66">h5pp::format</references>
      </memberdef>
      <memberdef kind="function" id="namespaceh5pp_1_1util_1a2d6e5f67ba925734776f2582c4db0a0e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataType</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;not std::is_base_of_v&lt;hid::hid_base&lt;DataType&gt;, DataType&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>constexpr int</type>
        <definition>constexpr int h5pp::util::getRank</definition>
        <argsstring>()</argsstring>
        <name>getRank</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" line="169" column="20" bodyfile="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" bodystart="169" bodyend="180"/>
        <references refid="namespaceh5pp_1a1916ac19846807673af32b055bb98af4" compoundref="h5pp_format_8h" startline="49" endline="66">h5pp::format</references>
      </memberdef>
      <memberdef kind="function" id="namespaceh5pp_1_1util_1adef11453affa0b4886885661e217a8e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int h5pp::util::getRankFromDimensions</definition>
        <argsstring>(const std::vector&lt; hsize_t &gt; &amp;dims)</argsstring>
        <name>getRankFromDimensions</name>
        <param>
          <type>const std::vector&lt; hsize_t &gt; &amp;</type>
          <declname>dims</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" line="182" column="17" bodyfile="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" bodystart="182" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="namespaceh5pp_1_1util_1a9c87e88d0a90d84e9a855e3e0ce47366" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataType</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;not std::is_base_of_v&lt;hid::hid_base&lt;DataType&gt;, DataType&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::vector&lt; hsize_t &gt;</type>
        <definition>std::vector&lt;hsize_t&gt; h5pp::util::getDimensions</definition>
        <argsstring>(const DataType &amp;data)</argsstring>
        <name>getDimensions</name>
        <param>
          <type>const DataType &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" line="185" column="18" bodyfile="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" bodystart="185" bodyend="228"/>
        <references refid="namespaceh5pp_1a1916ac19846807673af32b055bb98af4" compoundref="h5pp_format_8h" startline="49" endline="66">h5pp::format</references>
      </memberdef>
      <memberdef kind="function" id="namespaceh5pp_1_1util_1aa1a1b298bd7d9baa9acd2bfb1464766b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::optional&lt; std::vector&lt; hsize_t &gt; &gt;</type>
        <definition>std::optional&lt;std::vector&lt;hsize_t&gt; &gt; h5pp::util::decideDimensionsMax</definition>
        <argsstring>(const std::vector&lt; hsize_t &gt; &amp;dims, std::optional&lt; H5D_layout_t &gt; h5_layout)</argsstring>
        <name>decideDimensionsMax</name>
        <param>
          <type>const std::vector&lt; hsize_t &gt; &amp;</type>
          <declname>dims</declname>
        </param>
        <param>
          <type>std::optional&lt; H5D_layout_t &gt;</type>
          <declname>h5_layout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" line="230" column="27" bodyfile="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" bodystart="230" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="namespaceh5pp_1_1util_1a470d92244e2113e96e7f9b2cd88a2f3a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classh5pp_1_1hid_1_1h5s" kindref="compound">hid::h5s</ref></type>
        <definition>hid::h5s h5pp::util::getDsetSpace</definition>
        <argsstring>(const hsize_t size, const std::vector&lt; hsize_t &gt; &amp;dims, const H5D_layout_t &amp;h5_layout, std::optional&lt; std::vector&lt; hsize_t &gt;&gt; desiredDimsMax=std::nullopt)</argsstring>
        <name>getDsetSpace</name>
        <param>
          <type>const hsize_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const std::vector&lt; hsize_t &gt; &amp;</type>
          <declname>dims</declname>
        </param>
        <param>
          <type>const H5D_layout_t &amp;</type>
          <declname>h5_layout</declname>
        </param>
        <param>
          <type>std::optional&lt; std::vector&lt; hsize_t &gt;&gt;</type>
          <declname>desiredDimsMax</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" line="248" column="9" bodyfile="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" bodystart="248" bodyend="282"/>
        <references refid="namespaceh5pp_1a1916ac19846807673af32b055bb98af4" compoundref="h5pp_format_8h" startline="49" endline="66">h5pp::format</references>
        <references refid="namespaceh5pp_1_1util_1a75a70ac870194ad17968d2e180936bc2" compoundref="h5pp_utils_8h" startline="153" endline="155">getSizeFromDimensions</references>
      </memberdef>
      <memberdef kind="function" id="namespaceh5pp_1_1util_1a5b62df990ff2d31cd5dc0843592941cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classh5pp_1_1hid_1_1h5s" kindref="compound">hid::h5s</ref></type>
        <definition>hid::h5s h5pp::util::getMemSpace</definition>
        <argsstring>(const hsize_t size, const std::vector&lt; hsize_t &gt; &amp;dims)</argsstring>
        <name>getMemSpace</name>
        <param>
          <type>const hsize_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const std::vector&lt; hsize_t &gt; &amp;</type>
          <declname>dims</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" line="291" column="22" bodyfile="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" bodystart="291" bodyend="301"/>
        <references refid="namespaceh5pp_1_1util_1a75a70ac870194ad17968d2e180936bc2" compoundref="h5pp_utils_8h" startline="153" endline="155">getSizeFromDimensions</references>
      </memberdef>
      <memberdef kind="function" id="namespaceh5pp_1_1util_1a35003e09ae6a3d740c99e37a4a37cbf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataType</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;not std::is_base_of_v&lt;hid::hid_base&lt;DataType&gt;, DataType&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t h5pp::util::getBytesPerElem</definition>
        <argsstring>()</argsstring>
        <name>getBytesPerElem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" line="304" column="13" bodyfile="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" bodystart="304" bodyend="316"/>
        <references refid="namespaceh5pp_1a1916ac19846807673af32b055bb98af4" compoundref="h5pp_format_8h" startline="49" endline="66">h5pp::format</references>
      </memberdef>
      <memberdef kind="function" id="namespaceh5pp_1_1util_1aa9ef02af8c76ad03c851818ac0453ff5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataType</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;not std::is_base_of_v&lt;hid::hid_base&lt;DataType&gt;, DataType&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t h5pp::util::getBytesTotal</definition>
        <argsstring>(const DataType &amp;data, std::optional&lt; size_t &gt; size=std::nullopt)</argsstring>
        <name>getBytesTotal</name>
        <param>
          <type>const DataType &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::optional&lt; size_t &gt;</type>
          <declname>size</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" line="319" column="13" bodyfile="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" bodystart="319" bodyend="351"/>
        <references refid="namespaceh5pp_1a1916ac19846807673af32b055bb98af4" compoundref="h5pp_format_8h" startline="49" endline="66">h5pp::format</references>
      </memberdef>
      <memberdef kind="function" id="namespaceh5pp_1_1util_1a46d5e965bfd9408b059d7621b2a617d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>H5D_layout_t</type>
        <definition>H5D_layout_t h5pp::util::decideLayout</definition>
        <argsstring>(const size_t totalBytes)</argsstring>
        <name>decideLayout</name>
        <param>
          <type>const size_t</type>
          <declname>totalBytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Depending on the size of this dataset we may benefint from using either a contiguous layout (for big non-extendable non-compressible datasets), a chunked layout (for extendable and compressible datasets) or a compact layout (for tiny datasets).</para>
<para>Contiguous For big non-extendable non-compressible datasets</para>
<para>Chunked Chunking is required for enabling compression and other filters, as well as for creating extendible or unlimited dimension datasets. Note that a chunk always has the same rank as the dataset and the chunk&apos;s dimensions do not need to be factors of the dataset dimensions.</para>
<para>Compact A compact dataset is one in which the raw data is stored in the object header of the dataset. This layout is for very small datasets that can easily fit in the object header. The compact layout can improve storage and access performance for files that have many very tiny datasets. With one I/O access both the header and data values can be read. The compact layout reduces the size of a file, as the data is stored with the header which will always be allocated for a dataset. However, the object header is 64 KB in size, so this layout can only be used for very small datasets.</para>
        </inbodydescription>
        <location file="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" line="353" column="26" bodyfile="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" bodystart="353" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="namespaceh5pp_1_1util_1af6a0094dae2f3aa3815ab373445a3aaf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataType</type>
          </param>
        </templateparamlist>
        <type>H5D_layout_t</type>
        <definition>H5D_layout_t h5pp::util::decideLayout</definition>
        <argsstring>(const DataType &amp;data, std::optional&lt; std::vector&lt; hsize_t &gt;&gt; dsetDims, std::optional&lt; std::vector&lt; hsize_t &gt;&gt; dsetDimsMax)</argsstring>
        <name>decideLayout</name>
        <param>
          <type>const DataType &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::optional&lt; std::vector&lt; hsize_t &gt;&gt;</type>
          <declname>dsetDims</declname>
        </param>
        <param>
          <type>std::optional&lt; std::vector&lt; hsize_t &gt;&gt;</type>
          <declname>dsetDimsMax</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" line="387" column="26" bodyfile="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" bodystart="387" bodyend="401"/>
        <references refid="namespaceh5pp_1_1util_1a75a70ac870194ad17968d2e180936bc2" compoundref="h5pp_utils_8h" startline="153" endline="155">getSizeFromDimensions</references>
      </memberdef>
      <memberdef kind="function" id="namespaceh5pp_1_1util_1ab497c3103b3f9fa58d0cc9b3711a6ec6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::optional&lt; std::vector&lt; hsize_t &gt; &gt;</type>
        <definition>std::optional&lt;std::vector&lt;hsize_t&gt; &gt; h5pp::util::getChunkDimensions</definition>
        <argsstring>(size_t bytesPerElem, const std::vector&lt; hsize_t &gt; &amp;dims, std::optional&lt; std::vector&lt; hsize_t &gt;&gt; dimsMax, std::optional&lt; H5D_layout_t &gt; layout)</argsstring>
        <name>getChunkDimensions</name>
        <param>
          <type>size_t</type>
          <declname>bytesPerElem</declname>
        </param>
        <param>
          <type>const std::vector&lt; hsize_t &gt; &amp;</type>
          <declname>dims</declname>
        </param>
        <param>
          <type>std::optional&lt; std::vector&lt; hsize_t &gt;&gt;</type>
          <declname>dimsMax</declname>
        </param>
        <param>
          <type>std::optional&lt; H5D_layout_t &gt;</type>
          <declname>layout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" line="404" column="9" bodyfile="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" bodystart="404" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="namespaceh5pp_1_1util_1ac42743cca43b502d04b4faccf98a11b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void h5pp::util::setStringSize</definition>
        <argsstring>(const DataType &amp;data, hsize_t &amp;size, size_t &amp;bytes, std::vector&lt; hsize_t &gt; &amp;dims)</argsstring>
        <name>setStringSize</name>
        <param>
          <type>const DataType &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>hsize_t &amp;</type>
          <declname>size</declname>
        </param>
        <param>
          <type>size_t &amp;</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>std::vector&lt; hsize_t &gt; &amp;</type>
          <declname>dims</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" line="460" column="17" bodyfile="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" bodystart="460" bodyend="506"/>
        <references refid="namespaceh5pp_1a1916ac19846807673af32b055bb98af4" compoundref="h5pp_format_8h" startline="49" endline="66">h5pp::format</references>
        <references refid="namespaceh5pp_1_1util_1a75a70ac870194ad17968d2e180936bc2" compoundref="h5pp_utils_8h" startline="153" endline="155">getSizeFromDimensions</references>
      </memberdef>
      <memberdef kind="function" id="namespaceh5pp_1_1util_1a4ac2338aca306326f5c514c96c69665b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void h5pp::util::resizeData</definition>
        <argsstring>(DataType &amp;data, const std::vector&lt; hsize_t &gt; &amp;newDims)</argsstring>
        <name>resizeData</name>
        <param>
          <type>DataType &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const std::vector&lt; hsize_t &gt; &amp;</type>
          <declname>newDims</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" line="509" column="17" bodyfile="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" bodystart="509" bodyend="546"/>
        <references refid="namespaceh5pp_1a1916ac19846807673af32b055bb98af4" compoundref="h5pp_format_8h" startline="49" endline="66">h5pp::format</references>
        <references refid="namespaceh5pp_1_1util_1a75a70ac870194ad17968d2e180936bc2" compoundref="h5pp_utils_8h" startline="153" endline="155">getSizeFromDimensions</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A collection of functions to get information about C++ types passed by the user. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h" line="10" column="20"/>
  </compounddef>
</doxygen>
