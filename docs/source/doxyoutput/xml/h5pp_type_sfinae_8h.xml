<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="h5pp_type_sfinae_8h" kind="file" language="C++">
    <compoundname>h5ppTypeSfinae.h</compoundname>
    <includes refid="h5pp_eigen_8h" local="yes">h5ppEigen.h</includes>
    <includes refid="h5pp_optional_8h" local="yes">h5ppOptional.h</includes>
    <includes refid="h5pp_type_compound_8h" local="yes">h5ppTypeCompound.h</includes>
    <includes local="no">array</includes>
    <includes local="no">sstream</includes>
    <includes local="no">string</includes>
    <includes local="no">string_view</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">vector</includes>
    <includedby refid="h5pp_spdlog_8h" local="yes">/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppSpdlog.h</includedby>
    <includedby refid="h5pp_dimension_type_8h" local="yes">/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppDimensionType.h</includedby>
    <includedby refid="h5pp_hyperslab_8h" local="yes">/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppHyperslab.h</includedby>
    <includedby refid="h5pp_hdf5_8h" local="yes">/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppHdf5.h</includedby>
    <includedby refid="h5pp_utils_8h" local="yes">/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h</includedby>
    <includedby refid="h5pp_scan_8h" local="yes">/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppScan.h</includedby>
    <includedby refid="h5pp_type_compound_create_8h" local="yes">/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppTypeCompoundCreate.h</includedby>
    <incdepgraph>
      <node id="3">
        <label>iterator</label>
      </node>
      <node id="6">
        <label>h5ppTypeCompound.h</label>
        <link refid="h5pp_type_compound_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>numeric</label>
      </node>
      <node id="9">
        <label>string</label>
      </node>
      <node id="1">
        <label>/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppTypeSfinae.h</label>
        <link refid="h5pp_type_sfinae_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>string_view</label>
      </node>
      <node id="7">
        <label>h5ppHid.h</label>
        <link refid="h5pp_hid_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>h5ppEigen.h</label>
        <link refid="h5pp_eigen_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>vector</label>
      </node>
      <node id="11">
        <label>array</label>
      </node>
      <node id="12">
        <label>sstream</label>
      </node>
      <node id="8">
        <label>hdf5.h</label>
      </node>
      <node id="5">
        <label>h5ppOptional.h</label>
        <link refid="h5pp_optional_8h"/>
      </node>
      <node id="14">
        <label>type_traits</label>
      </node>
      <node id="10">
        <label>complex</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppSpdlog.h</label>
        <link refid="h5pp_spdlog_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppLogger.h</label>
        <link refid="h5pp_logger_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>/home/david/GitProjects/h5pp/h5pp/include/h5pp/h5pp.h</label>
        <link refid="h5pp_8h"/>
      </node>
      <node id="4">
        <label>/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppDimensionType.h</label>
        <link refid="h5pp_dimension_type_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppTypeSfinae.h</label>
        <link refid="h5pp_type_sfinae_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppHdf5.h</label>
        <link refid="h5pp_hdf5_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppUtils.h</label>
        <link refid="h5pp_utils_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppHyperslab.h</label>
        <link refid="h5pp_hyperslab_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppFormat.h</label>
        <link refid="h5pp_format_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppFile.h</label>
        <link refid="h5pp_file_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppInfo.h</label>
        <link refid="h5pp_info_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppTypeCompoundCreate.h</label>
        <link refid="h5pp_type_compound_create_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppScan.h</label>
        <link refid="h5pp_scan_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1print__type__and__exit__compile__time" prot="public">h5pp::type::sfinae::print_type_and_exit_compile_time</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1has__size" prot="public">h5pp::type::sfinae::has_size</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1has__size_3_01_t_00_01std_1_1void__t_3_01decltype_07std_1_1declv0cf648c1d68d361185fd366966a6882e" prot="public">h5pp::type::sfinae::has_size&lt; T, std::void_t&lt; decltype(std::declval&lt; T &gt;().size())&gt; &gt;</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1has__resize0" prot="public">h5pp::type::sfinae::has_resize0</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1has__resize0_3_01_t_00_01std_1_1void__t_3_01decltype_07std_1_1de953f50c571c206aabc89e45f2ab3db8d" prot="public">h5pp::type::sfinae::has_resize0&lt; T, std::void_t&lt; decltype(std::declval&lt; T &gt;().resize())&gt; &gt;</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1has__resize" prot="public">h5pp::type::sfinae::has_resize</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1has__resize_3_01_t_00_01std_1_1void__t_3_01decltype_07std_1_1dec78bc036c8c844ac95610f3b7cf191563" prot="public">h5pp::type::sfinae::has_resize&lt; T, std::void_t&lt; decltype(std::declval&lt; T &gt;().resize(0))&gt; &gt;</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1has__resize2" prot="public">h5pp::type::sfinae::has_resize2</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1has__resize2_3_01_t_00_01std_1_1void__t_3_01decltype_07std_1_1de0b705ea77930ecd8688f859ec18cb4dc" prot="public">h5pp::type::sfinae::has_resize2&lt; T, std::void_t&lt; decltype(std::declval&lt; T &gt;().resize(0, 0))&gt; &gt;</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1has__resize_n" prot="public">h5pp::type::sfinae::has_resizeN</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1has__resize_n_3_01_t_00_01rank_00_01std_1_1void__t_3_01decltype_b547c168c6da0a8f4d459e1f1ab4b254" prot="public">h5pp::type::sfinae::has_resizeN&lt; T, rank, std::void_t&lt; decltype(std::declval&lt; T &gt;().resize(std::declval&lt; std::array&lt; long, rank &gt;&gt;()))&gt; &gt;</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1has__data" prot="public">h5pp::type::sfinae::has_data</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1has__data_3_01_t_00_01std_1_1void__t_3_01decltype_07std_1_1declvdd07b47544269bfa491eee0271390c39" prot="public">h5pp::type::sfinae::has_data&lt; T, std::void_t&lt; decltype(std::declval&lt; T &gt;().data())&gt; &gt;</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1has__value__type" prot="public">h5pp::type::sfinae::has_value_type</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1has__value__type_3_01_t_00_01std_1_1void__t_3_01typename_01_t_1_1value__type_01_4_01_4" prot="public">h5pp::type::sfinae::has_value_type&lt; T, std::void_t&lt; typename T::value_type &gt; &gt;</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1has__c__str" prot="public">h5pp::type::sfinae::has_c_str</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1has__c__str_3_01_t_00_01std_1_1void__t_3_01decltype_07std_1_1decd276475bf54205d8cf5b1a06dcd602be" prot="public">h5pp::type::sfinae::has_c_str&lt; T, std::void_t&lt; decltype(std::declval&lt; T &gt;().c_str())&gt; &gt;</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1has__imag" prot="public">h5pp::type::sfinae::has_imag</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1has__imag_3_01_t_00_01std_1_1void__t_3_01decltype_07std_1_1declvdc72ae8402916a8e44c185aa8be87686" prot="public">h5pp::type::sfinae::has_imag&lt; T, std::void_t&lt; decltype(std::declval&lt; T &gt;().imag())&gt; &gt;</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1has___scalar" prot="public">h5pp::type::sfinae::has_Scalar</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1has___scalar_3_01_t_00_01std_1_1void__t_3_01typename_01_t_1_1_scalar_01_4_01_4" prot="public">h5pp::type::sfinae::has_Scalar&lt; T, std::void_t&lt; typename T::Scalar &gt; &gt;</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1has___num_indices" prot="public">h5pp::type::sfinae::has_NumIndices</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1has___num_indices_3_01_t_00_01std_1_1void__t_3_01decltype_07std_6cb000d4170b4eb891afb480c85efd97" prot="public">h5pp::type::sfinae::has_NumIndices&lt; T, std::void_t&lt; decltype(std::declval&lt; T &gt;().NumIndices)&gt; &gt;</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1has__dimensions" prot="public">h5pp::type::sfinae::has_dimensions</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1has__dimensions_3_01_t_00_01std_1_1void__t_3_01decltype_07std_1_f0e1e1e7366c0607e0c2f6698875ef64" prot="public">h5pp::type::sfinae::has_dimensions&lt; T, std::void_t&lt; decltype(std::declval&lt; T &gt;().dimensions())&gt; &gt;</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1has__x" prot="public">h5pp::type::sfinae::has_x</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1has__x_3_01_t_00_01std_1_1void__t_3_01decltype_07std_1_1declval_3_01_t_01_4_07_08_8x_08_4_01_4" prot="public">h5pp::type::sfinae::has_x&lt; T, std::void_t&lt; decltype(std::declval&lt; T &gt;().x)&gt; &gt;</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1has__y" prot="public">h5pp::type::sfinae::has_y</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1has__y_3_01_t_00_01std_1_1void__t_3_01decltype_07std_1_1declval_3_01_t_01_4_07_08_8y_08_4_01_4" prot="public">h5pp::type::sfinae::has_y&lt; T, std::void_t&lt; decltype(std::declval&lt; T &gt;().y)&gt; &gt;</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1has__z" prot="public">h5pp::type::sfinae::has_z</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1has__z_3_01_t_00_01std_1_1void__t_3_01decltype_07std_1_1declval_3_01_t_01_4_07_08_8z_08_4_01_4" prot="public">h5pp::type::sfinae::has_z&lt; T, std::void_t&lt; decltype(std::declval&lt; T &gt;().z)&gt; &gt;</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1is__specialization" prot="public">h5pp::type::sfinae::is_specialization</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1is__specialization_3_01_ref_3_01_args_8_8_8_01_4_00_01_ref_01_4" prot="public">h5pp::type::sfinae::is_specialization&lt; Ref&lt; Args... &gt;, Ref &gt;</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1is__std__vector" prot="public">h5pp::type::sfinae::is_std_vector</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1is__std__vector_3_01std_1_1vector_3_01_t_01_4_01_4" prot="public">h5pp::type::sfinae::is_std_vector&lt; std::vector&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1is__std__array" prot="public">h5pp::type::sfinae::is_std_array</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1is__std__array_3_01std_1_1array_3_01_t_00_01_n_01_4_01_4" prot="public">h5pp::type::sfinae::is_std_array&lt; std::array&lt; T, N &gt; &gt;</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1is__streamable" prot="public">h5pp::type::sfinae::is_streamable</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1is__streamable_3_01_t_00_01std_1_1void__t_3_01decltype_07std_1_1f274ff774b71720f462ab72ee70d2860" prot="public">h5pp::type::sfinae::is_streamable&lt; T, std::void_t&lt; decltype(std::declval&lt; std::stringstream &amp; &gt;&lt;&lt; std::declval&lt; T &gt;())&gt; &gt;</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1is__iterable" prot="public">h5pp::type::sfinae::is_iterable</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1is__iterable_3_01_t_00_01std_1_1void__t_3_01decltype_07std_1_1de6e3b3dcbf25d5a5a5a59c09d851cfb86" prot="public">h5pp::type::sfinae::is_iterable&lt; T, std::void_t&lt; decltype(std::declval&lt; T &gt;().begin()), decltype(std::declval&lt; T &gt;().end()), typename T::value_type &gt; &gt;</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1is__integral__iterable" prot="public">h5pp::type::sfinae::is_integral_iterable</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1is__integral__iterable__or__num" prot="public">h5pp::type::sfinae::is_integral_iterable_or_num</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1is__text" prot="public">h5pp::type::sfinae::is_text</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1has__text" prot="public">h5pp::type::sfinae::has_text</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1is__container__of" prot="public">h5pp::type::sfinae::is_container_of</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1is__std__complex" prot="public">h5pp::type::sfinae::is_std_complex</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1is__std__complex_3_01std_1_1complex_3_01_t_01_4_01_4" prot="public">h5pp::type::sfinae::is_std_complex&lt; std::complex&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1is___scalar2" prot="public">h5pp::type::sfinae::is_Scalar2</innerclass>
    <innerclass refid="structh5pp_1_1type_1_1sfinae_1_1is___scalar3" prot="public">h5pp::type::sfinae::is_Scalar3</innerclass>
    <innernamespace refid="namespaceh5pp">h5pp</innernamespace>
    <innernamespace refid="namespaceh5pp_1_1type">h5pp::type</innernamespace>
    <innernamespace refid="namespaceh5pp_1_1type_1_1sfinae">h5pp::type::sfinae</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="h5pp_eigen_8h" kindref="compound">h5ppEigen.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="h5pp_optional_8h" kindref="compound">h5ppOptional.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="h5pp_type_compound_8h" kindref="compound">h5ppTypeCompound.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string_view&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="namespaceh5pp_1_1type_1_1sfinae" refkind="compound"><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceh5pp_1_1type_1_1sfinae" kindref="compound">h5pp::type::sfinae</ref><sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SFINAE<sp/>detection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...&gt;</highlight></codeline>
<codeline lineno="19" refid="structh5pp_1_1type_1_1sfinae_1_1print__type__and__exit__compile__time" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structh5pp_1_1type_1_1sfinae_1_1print__type__and__exit__compile__time" kindref="compound">print_type_and_exit_compile_time</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="22" refid="namespaceh5pp_1_1type_1_1sfinae_1a7fa2b85295ac1c12ebb093b4fa9edd1d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespaceh5pp_1_1type_1_1sfinae_1a7fa2b85295ac1c12ebb093b4fa9edd1d" kindref="member">type_name</ref>()<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string_view<sp/>name,<sp/>prefix,<sp/>suffix;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/><sp/><sp/>=<sp/>__PRETTY_FUNCTION__;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prefix<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;auto<sp/>h5pp::type::sfinae::type_name()<sp/>[T<sp/>=<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>suffix<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/><sp/><sp/>=<sp/>__PRETTY_FUNCTION__;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prefix<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;constexpr<sp/>auto<sp/>h5pp::type::sfinae::type_name()<sp/>[with<sp/>T<sp/>=<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>suffix<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/><sp/><sp/>=<sp/>__FUNCSIG__;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prefix<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;auto<sp/>__cdecl<sp/>h5pp::type::sfinae::type_name&lt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>suffix<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&gt;(void)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name.remove_prefix(prefix.size());</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name.remove_suffix(suffix.size());</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/>std::</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">_t&lt;&gt;&gt;</highlight></codeline>
<codeline lineno="43" refid="structh5pp_1_1type_1_1sfinae_1_1has__size" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structh5pp_1_1type_1_1sfinae_1_1has__size" kindref="compound">has_size</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="45" refid="structh5pp_1_1type_1_1sfinae_1_1has__size_3_01_t_00_01std_1_1void__t_3_01decltype_07std_1_1declv0cf648c1d68d361185fd366966a6882e" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structh5pp_1_1type_1_1sfinae_1_1has__size" kindref="compound">has_size&lt;T, std::void_t&lt;decltype(std::declval&lt;T&gt;</ref>().size())&gt;&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="47" refid="namespaceh5pp_1_1type_1_1sfinae_1aecdc65a8dfbd46210b400bb28a7ea668" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceh5pp_1_1type_1_1sfinae_1aecdc65a8dfbd46210b400bb28a7ea668" kindref="member">has_size_v</ref><sp/>=<sp/><ref refid="structh5pp_1_1type_1_1sfinae_1_1has__size" kindref="compound">has_size&lt;T&gt;::value</ref>;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/>std::</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">_t&lt;&gt;&gt;</highlight></codeline>
<codeline lineno="50" refid="structh5pp_1_1type_1_1sfinae_1_1has__resize0" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structh5pp_1_1type_1_1sfinae_1_1has__resize0" kindref="compound">has_resize0</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="52" refid="structh5pp_1_1type_1_1sfinae_1_1has__resize0_3_01_t_00_01std_1_1void__t_3_01decltype_07std_1_1de953f50c571c206aabc89e45f2ab3db8d" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structh5pp_1_1type_1_1sfinae_1_1has__resize0" kindref="compound">has_resize0&lt;T, std::void_t&lt;decltype(std::declval&lt;T&gt;</ref>().resize())&gt;&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="54" refid="namespaceh5pp_1_1type_1_1sfinae_1a767fdadfd89cafaf0f1088fb2c61988e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceh5pp_1_1type_1_1sfinae_1a767fdadfd89cafaf0f1088fb2c61988e" kindref="member">has_resize0_v</ref><sp/>=<sp/><ref refid="structh5pp_1_1type_1_1sfinae_1_1has__resize0" kindref="compound">has_resize0&lt;T&gt;::value</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/>std::</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">_t&lt;&gt;&gt;</highlight></codeline>
<codeline lineno="57" refid="structh5pp_1_1type_1_1sfinae_1_1has__resize" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structh5pp_1_1type_1_1sfinae_1_1has__resize" kindref="compound">has_resize</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="59" refid="structh5pp_1_1type_1_1sfinae_1_1has__resize_3_01_t_00_01std_1_1void__t_3_01decltype_07std_1_1dec78bc036c8c844ac95610f3b7cf191563" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structh5pp_1_1type_1_1sfinae_1_1has__resize" kindref="compound">has_resize&lt;T, std::void_t&lt;decltype(std::declval&lt;T&gt;</ref>().resize(0))&gt;&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="61" refid="namespaceh5pp_1_1type_1_1sfinae_1ab0e955d0f6a90145b70f90e0a72827d7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceh5pp_1_1type_1_1sfinae_1ab0e955d0f6a90145b70f90e0a72827d7" kindref="member">has_resize_v</ref><sp/>=<sp/><ref refid="structh5pp_1_1type_1_1sfinae_1_1has__resize" kindref="compound">has_resize&lt;T&gt;::value</ref>;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/>std::</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">_t&lt;&gt;&gt;</highlight></codeline>
<codeline lineno="64" refid="structh5pp_1_1type_1_1sfinae_1_1has__resize2" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structh5pp_1_1type_1_1sfinae_1_1has__resize2" kindref="compound">has_resize2</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="66" refid="structh5pp_1_1type_1_1sfinae_1_1has__resize2_3_01_t_00_01std_1_1void__t_3_01decltype_07std_1_1de0b705ea77930ecd8688f859ec18cb4dc" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structh5pp_1_1type_1_1sfinae_1_1has__resize2" kindref="compound">has_resize2&lt;T, std::void_t&lt;decltype(std::declval&lt;T&gt;</ref>().resize(0,<sp/>0))&gt;&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="68" refid="namespaceh5pp_1_1type_1_1sfinae_1a1bb926734436f3bc19c2be551995ff0f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceh5pp_1_1type_1_1sfinae_1a1bb926734436f3bc19c2be551995ff0f" kindref="member">has_resize2_v</ref><sp/>=<sp/><ref refid="structh5pp_1_1type_1_1sfinae_1_1has__resize2" kindref="compound">has_resize2&lt;T&gt;::value</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>auto<sp/>rank,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/>std::</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">_t&lt;&gt;&gt;</highlight></codeline>
<codeline lineno="71" refid="structh5pp_1_1type_1_1sfinae_1_1has__resize_n" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structh5pp_1_1type_1_1sfinae_1_1has__resize_n" kindref="compound">has_resizeN</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>auto<sp/>rank&gt;</highlight></codeline>
<codeline lineno="73" refid="structh5pp_1_1type_1_1sfinae_1_1has__resize_n_3_01_t_00_01rank_00_01std_1_1void__t_3_01decltype_b547c168c6da0a8f4d459e1f1ab4b254" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structh5pp_1_1type_1_1sfinae_1_1has__resize_n" kindref="compound">has_resizeN&lt;T, rank, std::void_t&lt;decltype(std::declval&lt;T&gt;</ref>().resize(std::declval&lt;std::array&lt;long,<sp/>rank&gt;&gt;()))&gt;&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>auto<sp/>rank&gt;</highlight></codeline>
<codeline lineno="75" refid="namespaceh5pp_1_1type_1_1sfinae_1a4a7b4291fb43706280017eaef50f3309" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceh5pp_1_1type_1_1sfinae_1a4a7b4291fb43706280017eaef50f3309" kindref="member">has_resizeN_v</ref><sp/>=<sp/><ref refid="structh5pp_1_1type_1_1sfinae_1_1has__resize_n" kindref="compound">has_resizeN&lt;T, rank&gt;::value</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/>std::</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">_t&lt;&gt;&gt;</highlight></codeline>
<codeline lineno="78" refid="structh5pp_1_1type_1_1sfinae_1_1has__data" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structh5pp_1_1type_1_1sfinae_1_1has__data" kindref="compound">has_data</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="80" refid="structh5pp_1_1type_1_1sfinae_1_1has__data_3_01_t_00_01std_1_1void__t_3_01decltype_07std_1_1declvdd07b47544269bfa491eee0271390c39" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structh5pp_1_1type_1_1sfinae_1_1has__data" kindref="compound">has_data&lt;T, std::void_t&lt;decltype(std::declval&lt;T&gt;</ref>().data())&gt;&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="82" refid="namespaceh5pp_1_1type_1_1sfinae_1a7307ab0b3c182ca1a24a491dbdc311f9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceh5pp_1_1type_1_1sfinae_1a7307ab0b3c182ca1a24a491dbdc311f9" kindref="member">has_data_v</ref><sp/>=<sp/><ref refid="structh5pp_1_1type_1_1sfinae_1_1has__data" kindref="compound">has_data&lt;T&gt;::value</ref>;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/>std::</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">_t&lt;&gt;&gt;</highlight></codeline>
<codeline lineno="85" refid="structh5pp_1_1type_1_1sfinae_1_1has__value__type" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structh5pp_1_1type_1_1sfinae_1_1has__value__type" kindref="compound">has_value_type</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="87" refid="structh5pp_1_1type_1_1sfinae_1_1has__value__type_3_01_t_00_01std_1_1void__t_3_01typename_01_t_1_1value__type_01_4_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structh5pp_1_1type_1_1sfinae_1_1has__value__type" kindref="compound">has_value_type&lt;T, std::void_t&lt;typename T::value_type&gt;</ref>&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="89" refid="namespaceh5pp_1_1type_1_1sfinae_1a04dc55312ea29a08e35e93ed9118b138" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceh5pp_1_1type_1_1sfinae_1a04dc55312ea29a08e35e93ed9118b138" kindref="member">has_value_type_v</ref><sp/>=<sp/><ref refid="structh5pp_1_1type_1_1sfinae_1_1has__value__type" kindref="compound">has_value_type&lt;T&gt;::value</ref>;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/>std::</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">_t&lt;&gt;&gt;</highlight></codeline>
<codeline lineno="92" refid="structh5pp_1_1type_1_1sfinae_1_1has__c__str" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structh5pp_1_1type_1_1sfinae_1_1has__c__str" kindref="compound">has_c_str</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="94" refid="structh5pp_1_1type_1_1sfinae_1_1has__c__str_3_01_t_00_01std_1_1void__t_3_01decltype_07std_1_1decd276475bf54205d8cf5b1a06dcd602be" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structh5pp_1_1type_1_1sfinae_1_1has__c__str" kindref="compound">has_c_str</ref>&lt;T,<sp/>std::void_t&lt;decltype(std::declval&lt;T&gt;().c_str())&gt;&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="96" refid="namespaceh5pp_1_1type_1_1sfinae_1aa27f32e9e806c6af54c448f6115bdbe6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceh5pp_1_1type_1_1sfinae_1aa27f32e9e806c6af54c448f6115bdbe6" kindref="member">has_c_str_v</ref><sp/>=<sp/><ref refid="structh5pp_1_1type_1_1sfinae_1_1has__c__str" kindref="compound">has_c_str&lt;T&gt;::value</ref>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/>std::</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">_t&lt;&gt;&gt;</highlight></codeline>
<codeline lineno="99" refid="structh5pp_1_1type_1_1sfinae_1_1has__imag" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structh5pp_1_1type_1_1sfinae_1_1has__imag" kindref="compound">has_imag</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="101" refid="structh5pp_1_1type_1_1sfinae_1_1has__imag_3_01_t_00_01std_1_1void__t_3_01decltype_07std_1_1declvdc72ae8402916a8e44c185aa8be87686" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structh5pp_1_1type_1_1sfinae_1_1has__imag" kindref="compound">has_imag</ref>&lt;T,<sp/>std::void_t&lt;decltype(std::declval&lt;T&gt;().imag())&gt;&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="103" refid="namespaceh5pp_1_1type_1_1sfinae_1a29fa705d9c8d919ba6d0e94f6774abd2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceh5pp_1_1type_1_1sfinae_1a29fa705d9c8d919ba6d0e94f6774abd2" kindref="member">has_imag_v</ref><sp/>=<sp/><ref refid="structh5pp_1_1type_1_1sfinae_1_1has__imag" kindref="compound">has_imag&lt;T&gt;::value</ref>;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/>std::</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">_t&lt;&gt;&gt;</highlight></codeline>
<codeline lineno="106" refid="structh5pp_1_1type_1_1sfinae_1_1has___scalar" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structh5pp_1_1type_1_1sfinae_1_1has___scalar" kindref="compound">has_Scalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="108" refid="structh5pp_1_1type_1_1sfinae_1_1has___scalar_3_01_t_00_01std_1_1void__t_3_01typename_01_t_1_1_scalar_01_4_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structh5pp_1_1type_1_1sfinae_1_1has___scalar" kindref="compound">has_Scalar</ref>&lt;T,<sp/>std::void_t&lt;typename<sp/>T::Scalar&gt;&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="110" refid="namespaceh5pp_1_1type_1_1sfinae_1ae3e45b1e9676a1693f810add2ce9204f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceh5pp_1_1type_1_1sfinae_1ae3e45b1e9676a1693f810add2ce9204f" kindref="member">has_Scalar_v</ref><sp/>=<sp/><ref refid="structh5pp_1_1type_1_1sfinae_1_1has___scalar" kindref="compound">has_Scalar&lt;T&gt;::value</ref>;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/>std::</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">_t&lt;&gt;&gt;</highlight></codeline>
<codeline lineno="113" refid="structh5pp_1_1type_1_1sfinae_1_1has___num_indices" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structh5pp_1_1type_1_1sfinae_1_1has___num_indices" kindref="compound">has_NumIndices</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="115" refid="structh5pp_1_1type_1_1sfinae_1_1has___num_indices_3_01_t_00_01std_1_1void__t_3_01decltype_07std_6cb000d4170b4eb891afb480c85efd97" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structh5pp_1_1type_1_1sfinae_1_1has___num_indices" kindref="compound">has_NumIndices</ref>&lt;T,<sp/>std::void_t&lt;decltype(std::declval&lt;T&gt;().NumIndices)&gt;&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="117" refid="namespaceh5pp_1_1type_1_1sfinae_1a4e382e38052ea11d15adbe63965c0edf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceh5pp_1_1type_1_1sfinae_1a4e382e38052ea11d15adbe63965c0edf" kindref="member">has_NumIndices_v</ref><sp/>=<sp/><ref refid="structh5pp_1_1type_1_1sfinae_1_1has___num_indices" kindref="compound">has_NumIndices&lt;T&gt;::value</ref>;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/>std::</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">_t&lt;&gt;&gt;</highlight></codeline>
<codeline lineno="120" refid="structh5pp_1_1type_1_1sfinae_1_1has__dimensions" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structh5pp_1_1type_1_1sfinae_1_1has__dimensions" kindref="compound">has_dimensions</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="122" refid="structh5pp_1_1type_1_1sfinae_1_1has__dimensions_3_01_t_00_01std_1_1void__t_3_01decltype_07std_1_f0e1e1e7366c0607e0c2f6698875ef64" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structh5pp_1_1type_1_1sfinae_1_1has__dimensions" kindref="compound">has_dimensions</ref>&lt;T,<sp/>std::void_t&lt;decltype(std::declval&lt;T&gt;().dimensions())&gt;&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="124" refid="namespaceh5pp_1_1type_1_1sfinae_1ac58613a70e2cbaddfe8b111a8bc4ce3c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceh5pp_1_1type_1_1sfinae_1ac58613a70e2cbaddfe8b111a8bc4ce3c" kindref="member">has_dimensions_v</ref><sp/>=<sp/><ref refid="structh5pp_1_1type_1_1sfinae_1_1has__dimensions" kindref="compound">has_dimensions&lt;T&gt;::value</ref>;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/>std::</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">_t&lt;&gt;&gt;</highlight></codeline>
<codeline lineno="127" refid="structh5pp_1_1type_1_1sfinae_1_1has__x" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structh5pp_1_1type_1_1sfinae_1_1has__x" kindref="compound">has_x</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="129" refid="structh5pp_1_1type_1_1sfinae_1_1has__x_3_01_t_00_01std_1_1void__t_3_01decltype_07std_1_1declval_3_01_t_01_4_07_08_8x_08_4_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structh5pp_1_1type_1_1sfinae_1_1has__x" kindref="compound">has_x</ref>&lt;T,<sp/>std::void_t&lt;decltype(std::declval&lt;T&gt;().x)&gt;&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="131" refid="namespaceh5pp_1_1type_1_1sfinae_1ae5c7e8c9cd88f1b752285befceb7b23f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceh5pp_1_1type_1_1sfinae_1ae5c7e8c9cd88f1b752285befceb7b23f" kindref="member">has_x_v</ref><sp/>=<sp/><ref refid="structh5pp_1_1type_1_1sfinae_1_1has__x" kindref="compound">has_x&lt;T&gt;::value</ref>;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/>std::</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">_t&lt;&gt;&gt;</highlight></codeline>
<codeline lineno="134" refid="structh5pp_1_1type_1_1sfinae_1_1has__y" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structh5pp_1_1type_1_1sfinae_1_1has__y" kindref="compound">has_y</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="136" refid="structh5pp_1_1type_1_1sfinae_1_1has__y_3_01_t_00_01std_1_1void__t_3_01decltype_07std_1_1declval_3_01_t_01_4_07_08_8y_08_4_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structh5pp_1_1type_1_1sfinae_1_1has__y" kindref="compound">has_y</ref>&lt;T,<sp/>std::void_t&lt;decltype(std::declval&lt;T&gt;().y)&gt;&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="138" refid="namespaceh5pp_1_1type_1_1sfinae_1a8c6a47e3077db31bbed31f7df8a47b0a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceh5pp_1_1type_1_1sfinae_1a8c6a47e3077db31bbed31f7df8a47b0a" kindref="member">has_y_v</ref><sp/>=<sp/><ref refid="structh5pp_1_1type_1_1sfinae_1_1has__y" kindref="compound">has_y&lt;T&gt;::value</ref>;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/>std::</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">_t&lt;&gt;&gt;</highlight></codeline>
<codeline lineno="141" refid="structh5pp_1_1type_1_1sfinae_1_1has__z" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structh5pp_1_1type_1_1sfinae_1_1has__z" kindref="compound">has_z</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="143" refid="structh5pp_1_1type_1_1sfinae_1_1has__z_3_01_t_00_01std_1_1void__t_3_01decltype_07std_1_1declval_3_01_t_01_4_07_08_8z_08_4_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structh5pp_1_1type_1_1sfinae_1_1has__z" kindref="compound">has_z</ref>&lt;T,<sp/>std::void_t&lt;decltype(std::declval&lt;T&gt;().z)&gt;&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="145" refid="namespaceh5pp_1_1type_1_1sfinae_1a431fb1fcf3562a544f5fad70fe76ff8f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceh5pp_1_1type_1_1sfinae_1a431fb1fcf3562a544f5fad70fe76ff8f" kindref="member">has_z_v</ref><sp/>=<sp/><ref refid="structh5pp_1_1type_1_1sfinae_1_1has__z" kindref="compound">has_z&lt;T&gt;::value</ref>;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Test,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Ref&gt;</highlight></codeline>
<codeline lineno="148" refid="structh5pp_1_1type_1_1sfinae_1_1is__specialization" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structh5pp_1_1type_1_1sfinae_1_1is__specialization" kindref="compound">is_specialization</ref><sp/>:<sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Ref,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="150" refid="structh5pp_1_1type_1_1sfinae_1_1is__specialization_3_01_ref_3_01_args_8_8_8_01_4_00_01_ref_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structh5pp_1_1type_1_1sfinae_1_1is__specialization" kindref="compound">is_specialization</ref>&lt;Ref&lt;Args...&gt;,<sp/>Ref&gt;<sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="153" refid="structh5pp_1_1type_1_1sfinae_1_1is__std__vector" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structh5pp_1_1type_1_1sfinae_1_1is__std__vector" kindref="compound">is_std_vector</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="155" refid="structh5pp_1_1type_1_1sfinae_1_1is__std__vector_3_01std_1_1vector_3_01_t_01_4_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structh5pp_1_1type_1_1sfinae_1_1is__std__vector" kindref="compound">is_std_vector</ref>&lt;std::vector&lt;T&gt;&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="157" refid="namespaceh5pp_1_1type_1_1sfinae_1a29b2ac48384daefcaccb968a72f10054" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceh5pp_1_1type_1_1sfinae_1a29b2ac48384daefcaccb968a72f10054" kindref="member">is_std_vector_v</ref><sp/>=<sp/><ref refid="structh5pp_1_1type_1_1sfinae_1_1is__std__vector" kindref="compound">is_std_vector&lt;T&gt;::value</ref>;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="160" refid="structh5pp_1_1type_1_1sfinae_1_1is__std__array" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structh5pp_1_1type_1_1sfinae_1_1is__std__array" kindref="compound">is_std_array</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>auto<sp/>N&gt;</highlight></codeline>
<codeline lineno="162" refid="structh5pp_1_1type_1_1sfinae_1_1is__std__array_3_01std_1_1array_3_01_t_00_01_n_01_4_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structh5pp_1_1type_1_1sfinae_1_1is__std__array" kindref="compound">is_std_array</ref>&lt;std::array&lt;T,<sp/>N&gt;&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="164" refid="namespaceh5pp_1_1type_1_1sfinae_1a87c89b3f6ab9cad8f0ea7cb166dafb49" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceh5pp_1_1type_1_1sfinae_1a87c89b3f6ab9cad8f0ea7cb166dafb49" kindref="member">is_std_array_v</ref><sp/>=<sp/><ref refid="structh5pp_1_1type_1_1sfinae_1_1is__std__array" kindref="compound">is_std_array&lt;T&gt;::value</ref>;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/>std::</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">_t&lt;&gt;&gt;</highlight></codeline>
<codeline lineno="167" refid="structh5pp_1_1type_1_1sfinae_1_1is__streamable" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structh5pp_1_1type_1_1sfinae_1_1is__streamable" kindref="compound">is_streamable</ref><sp/>:<sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="169" refid="structh5pp_1_1type_1_1sfinae_1_1is__streamable_3_01_t_00_01std_1_1void__t_3_01decltype_07std_1_1f274ff774b71720f462ab72ee70d2860" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structh5pp_1_1type_1_1sfinae_1_1is__streamable" kindref="compound">is_streamable</ref>&lt;T,<sp/>std::void_t&lt;decltype(std::declval&lt;std::stringstream<sp/>&amp;&gt;<sp/>&lt;&lt;<sp/>std::declval&lt;T&gt;())&gt;&gt;<sp/>:<sp/>public<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="171" refid="namespaceh5pp_1_1type_1_1sfinae_1a9ce71cf135b1f0d87b6461c077d32a0c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>inline<sp/>constexpr<sp/>bool<sp/>is_streamable_v<sp/>=<sp/>is_streamable&lt;T&gt;::value;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>std::void_t&lt;&gt;&gt;</highlight></codeline>
<codeline lineno="174" refid="structh5pp_1_1type_1_1sfinae_1_1is__iterable" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/>is_iterable<sp/>:<sp/>public<sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="176" refid="structh5pp_1_1type_1_1sfinae_1_1is__iterable_3_01_t_00_01std_1_1void__t_3_01decltype_07std_1_1de6e3b3dcbf25d5a5a5a59c09d851cfb86" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/>is_iterable&lt;T,<sp/>std::void_t&lt;decltype(std::declval&lt;T&gt;().begin()),<sp/>decltype(std::declval&lt;T&gt;().end()),<sp/>typename<sp/>T::value_type&gt;&gt;<sp/>:<sp/>public<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="178" refid="namespaceh5pp_1_1type_1_1sfinae_1afa2776e84df04f30e65c0943682b6287" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>inline<sp/>constexpr<sp/>bool<sp/>is_iterable_v<sp/>=<sp/>is_iterable&lt;T&gt;::value;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="181" refid="structh5pp_1_1type_1_1sfinae_1_1is__integral__iterable" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/>is_integral_iterable<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>private:</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;typename<sp/>U&gt;</highlight></codeline>
<codeline lineno="184" refid="structh5pp_1_1type_1_1sfinae_1_1is__integral__iterable_1aae465fca0b07d32ba1f1887429451f99" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>constexpr<sp/>bool<sp/>test()<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>constexpr(is_iterable_v&lt;U&gt;<sp/>and<sp/>has_value_type_v&lt;U&gt;)</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>std::is_integral_v&lt;typename<sp/>T::value_type&gt;;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>public:</highlight></codeline>
<codeline lineno="192" refid="structh5pp_1_1type_1_1sfinae_1_1is__integral__iterable_1af665ade4264a1597020bbd8b9abfa907" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>constexpr<sp/>bool<sp/>value<sp/>=<sp/>test&lt;T&gt;();</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="195" refid="namespaceh5pp_1_1type_1_1sfinae_1a261ef4473305db2f907e8d6cc68a8e14" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>inline<sp/>constexpr<sp/>bool<sp/>is_integral_iterable_v<sp/>=<sp/>is_integral_iterable&lt;T&gt;::value;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="198" refid="structh5pp_1_1type_1_1sfinae_1_1is__integral__iterable__or__num" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/>is_integral_iterable_or_num<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>private:</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;typename<sp/>U&gt;</highlight></codeline>
<codeline lineno="201" refid="structh5pp_1_1type_1_1sfinae_1_1is__integral__iterable__or__num_1a61f09634c07ea1200df5ab365d002cb5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>constexpr<sp/>bool<sp/>test()<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>constexpr(is_integral_iterable_v&lt;T&gt;)<sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>std::is_integral_v&lt;T&gt;;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>public:</highlight></codeline>
<codeline lineno="207" refid="structh5pp_1_1type_1_1sfinae_1_1is__integral__iterable__or__num_1ab5be00a889f7fa45fa7c751e8e9ce800" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>constexpr<sp/>bool<sp/>value<sp/>=<sp/>test&lt;T&gt;();</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="210" refid="namespaceh5pp_1_1type_1_1sfinae_1a8d1392f58e8fb2d5fe8bf6db9b662888" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>inline<sp/>constexpr<sp/>bool<sp/>is_integral_iterable_or_num_v<sp/>=<sp/>is_integral_iterable_or_num&lt;T&gt;::value;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="213" refid="namespaceh5pp_1_1type_1_1sfinae_1aef79e32f07687d79da2dc562e3147956" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>enable_if_is_integral_iterable<sp/>=<sp/>std::enable_if_t&lt;is_integral_iterable_v&lt;T&gt;&gt;;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="216" refid="namespaceh5pp_1_1type_1_1sfinae_1a6c89cafb27bb29455e315a568f02d689" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>enable_if_is_integral_iterable_or_num<sp/>=<sp/>std::enable_if_t&lt;is_integral_iterable_or_num_v&lt;T&gt;&gt;;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="219" refid="namespaceh5pp_1_1type_1_1sfinae_1aca51c26f66e359d4e98c2c79f5c862af" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>enable_if_is_integral_iterable_or_nullopt<sp/>=<sp/>std::enable_if_t&lt;is_integral_iterable_or_num_v&lt;T&gt;<sp/>or<sp/>std::is_same_v&lt;T,<sp/>std::nullopt_t&gt;&gt;;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="224" refid="namespaceh5pp_1_1type_1_1sfinae_1aa0540b95af468377117c0bfb8c303b27" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>enable_if_is_iterable_or_nullopt<sp/>=<sp/>std::enable_if_t&lt;is_iterable_v&lt;T&gt;<sp/>or<sp/>std::is_same_v&lt;T,<sp/>std::nullopt_t&gt;&gt;;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="229" refid="namespaceh5pp_1_1type_1_1sfinae_1ad06e0bc67b4b56229f57d47be812111b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>enable_if_is_h5_loc<sp/>=<sp/>std::enable_if_t&lt;std::is_same_v&lt;T,hid::h5f&gt;<sp/>or<sp/>std::is_same_v&lt;T,<sp/>hid::h5g&gt;<sp/>or<sp/>std::is_same_v&lt;T,<sp/>hid::h5o&gt;<sp/>or<sp/>std::is_same_v&lt;T,<sp/>hid_t&gt;&gt;;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="231" refid="namespaceh5pp_1_1type_1_1sfinae_1a4cd388a23730f9e6bdf931ad28f44c1e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>enable_if_is_h5_loc_or_hid_t<sp/>=<sp/>std::enable_if_t&lt;<sp/>std::is_same_v&lt;T,hid::h5f&gt;<sp/>or<sp/>std::is_same_v&lt;T,<sp/>hid::h5g&gt;<sp/>or<sp/>std::is_same_v&lt;T,<sp/>hid::h5o&gt;<sp/>or<sp/>std::is_same_v&lt;T,<sp/>hid_t&gt;<sp/>or<sp/>std::is_same_v&lt;T,hid_t&gt;&gt;;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="233" refid="namespaceh5pp_1_1type_1_1sfinae_1adf401c4a3b3421680902c64dbe555b4e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>enable_if_is_h5_link<sp/>=<sp/>std::enable_if_t&lt;<sp/>std::is_same_v&lt;T,hid::h5f&gt;<sp/>or<sp/>std::is_same_v&lt;T,<sp/>hid::h5d&gt;<sp/>or<sp/>std::is_same_v&lt;T,<sp/>hid::h5g&gt;<sp/>or<sp/>std::is_same_v&lt;T,<sp/>hid::h5o&gt;<sp/>or<sp/>std::is_same_v&lt;T,<sp/>hid_t&gt;&gt;;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="235" refid="namespaceh5pp_1_1type_1_1sfinae_1a41e682f87c845644c480090084ebf250" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>enable_if_is_h5_link_or_hid_t<sp/>=<sp/>std::enable_if_t&lt;<sp/>std::is_same_v&lt;T,hid::h5f&gt;<sp/>or<sp/>std::is_same_v&lt;T,<sp/>hid::h5d&gt;<sp/>or<sp/>std::is_same_v&lt;T,<sp/>hid::h5g&gt;<sp/>or<sp/>std::is_same_v&lt;T,<sp/>hid::h5o&gt;<sp/>or<sp/>std::is_same_v&lt;T,<sp/>hid_t&gt;<sp/>or<sp/>std::is_same_v&lt;T,hid_t&gt;&gt;;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="240" refid="structh5pp_1_1type_1_1sfinae_1_1is__text" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/>is_text<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>private:</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;typename<sp/>U&gt;</highlight></codeline>
<codeline lineno="243" refid="structh5pp_1_1type_1_1sfinae_1_1is__text_1a31e3e8b2e5708b8169efcf84a83e31e5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>constexpr<sp/>bool<sp/>test()<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>DecayType<sp/>=<sp/>typename<sp/>std::decay&lt;U&gt;::type;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>support<sp/>for<sp/>wchar_t,<sp/>char16_t<sp/>and<sp/>char32_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>constexpr(has_c_str_v&lt;DecayType&gt;)<sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>constexpr(std::is_same_v&lt;DecayType,<sp/>std::string&gt;)<sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>constexpr(std::is_same_v&lt;DecayType,<sp/>std::string_view&gt;)<sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>constexpr(std::is_same_v&lt;DecayType,<sp/>const<sp/>char<sp/>*&gt;)<sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>constexpr(std::is_same_v&lt;DecayType,<sp/>const<sp/>char[]&gt;)<sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>constexpr(std::is_same_v&lt;DecayType,<sp/>char<sp/>*&gt;)<sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>constexpr(std::is_same_v&lt;DecayType,<sp/>char[]&gt;)<sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>constexpr(std::is_same_v&lt;DecayType,<sp/>char&gt;)</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>public:</highlight></codeline>
<codeline lineno="260" refid="structh5pp_1_1type_1_1sfinae_1_1is__text_1a7fdb9d26ae8b7ea53c8bfab7055ecebf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>constexpr<sp/>bool<sp/>value<sp/>=<sp/>test&lt;T&gt;();</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="264" refid="namespaceh5pp_1_1type_1_1sfinae_1a49f926f789066101b5bc371e8c751507" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>inline<sp/>constexpr<sp/>bool<sp/>is_text_v<sp/>=<sp/>is_text&lt;T&gt;::value;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="267" refid="structh5pp_1_1type_1_1sfinae_1_1has__text" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/>has_text<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>private:</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;typename<sp/>U&gt;</highlight></codeline>
<codeline lineno="270" refid="structh5pp_1_1type_1_1sfinae_1_1has__text_1a8206d7761406d551cbba594ffe2023e5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>constexpr<sp/>bool<sp/>test()<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>DecayType<sp/>=<sp/>typename<sp/>std::decay&lt;U&gt;::type;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>constexpr(is_text_v&lt;U&gt;)<sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>constexpr(std::is_array_v&lt;DecayType&gt;)<sp/>return<sp/>is_text_v&lt;typename<sp/>std::remove_all_extents_t&lt;DecayType&gt;&gt;;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>constexpr(std::is_pointer_v&lt;DecayType&gt;)<sp/>return<sp/>is_text_v&lt;typename<sp/>std::remove_pointer_t&lt;DecayType&gt;&gt;;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>constexpr(has_value_type_v&lt;DecayType&gt;)<sp/>return<sp/>is_text_v&lt;typename<sp/>DecayType::value_type&gt;;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>public:</highlight></codeline>
<codeline lineno="280" refid="structh5pp_1_1type_1_1sfinae_1_1has__text_1a0fa12b665c73baa872a1aab03cb161b2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>constexpr<sp/>bool<sp/>value<sp/>=<sp/>test&lt;T&gt;();</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="283" refid="namespaceh5pp_1_1type_1_1sfinae_1af5625bfa032aef50d424c1ab8ed50527" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>inline<sp/>constexpr<sp/>bool<sp/>has_text_v<sp/>=<sp/>has_text&lt;T&gt;::value;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>Outer,<sp/>typename<sp/>Inner&gt;</highlight></codeline>
<codeline lineno="286" refid="structh5pp_1_1type_1_1sfinae_1_1is__container__of" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/>is_container_of<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>private:</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;typename<sp/>O,<sp/>typename<sp/>I&gt;</highlight></codeline>
<codeline lineno="289" refid="structh5pp_1_1type_1_1sfinae_1_1is__container__of_1a71c028623f4c27bcb0779a6ad11ae12c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>constexpr<sp/>bool<sp/>test()<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>Od<sp/>=<sp/>typename<sp/>std::decay&lt;O&gt;::type;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>constexpr(is_iterable_v&lt;O&gt;)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>constexpr(has_value_type_v&lt;O&gt;)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>I_lhs<sp/>=<sp/>typename<sp/>std::decay&lt;I&gt;::type;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>I_rhs<sp/>=<sp/>typename<sp/>std::decay&lt;typename<sp/>O::value_type&gt;::type;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>std::is_same_v&lt;I_lhs,<sp/>I_rhs&gt;;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>public:</highlight></codeline>
<codeline lineno="302" refid="structh5pp_1_1type_1_1sfinae_1_1is__container__of_1a149d85e56abb4a34db21ebdf15a8d466" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>constexpr<sp/>bool<sp/>value<sp/>=<sp/>test&lt;Outer,<sp/>Inner&gt;();</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>Outer,<sp/>typename<sp/>Inner&gt;</highlight></codeline>
<codeline lineno="306" refid="namespaceh5pp_1_1type_1_1sfinae_1a9472f1881eeeed771e714f96c32ada74" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>inline<sp/>constexpr<sp/>bool<sp/>is_container_of_v<sp/>=<sp/>is_container_of&lt;Outer,<sp/>Inner&gt;::value;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="309" refid="structh5pp_1_1type_1_1sfinae_1_1is__std__complex" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/>is_std_complex<sp/>:<sp/>public<sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="311" refid="structh5pp_1_1type_1_1sfinae_1_1is__std__complex_3_01std_1_1complex_3_01_t_01_4_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/>is_std_complex&lt;std::complex&lt;T&gt;&gt;<sp/>:<sp/>public<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="313" refid="namespaceh5pp_1_1type_1_1sfinae_1a682bd1e6344a15429f5171ec731f7ea8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>inline<sp/>constexpr<sp/>bool<sp/>is_std_complex_v<sp/>=<sp/>is_std_complex&lt;T&gt;::value;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="316" refid="structh5pp_1_1type_1_1sfinae_1_1is___scalar2" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/>is_Scalar2<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>private:</highlight></codeline>
<codeline lineno="318" refid="structh5pp_1_1type_1_1sfinae_1_1is___scalar2_1aa5062e2cf6df2e55c46f6b44acc9f3c5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>constexpr<sp/>bool<sp/>test()<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>constexpr(has_x_v&lt;T&gt;<sp/>and<sp/>has_y_v&lt;T&gt;<sp/>and<sp/>not<sp/>has_z_v&lt;T&gt;)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/>size_t<sp/>t_size<sp/>=<sp/>sizeof(T);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/>size_t<sp/>x_size<sp/>=<sp/>sizeof(T::x);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/>size_t<sp/>y_size<sp/>=<sp/>sizeof(T::y);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>t_size<sp/>==<sp/>x_size<sp/>+<sp/>y_size;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>public:</highlight></codeline>
<codeline lineno="330" refid="structh5pp_1_1type_1_1sfinae_1_1is___scalar2_1a4260b700187770e73df972e95552cb18" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>constexpr<sp/>bool<sp/>value<sp/>=<sp/>test();</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="333" refid="namespaceh5pp_1_1type_1_1sfinae_1a74f43c882d51fa02ffdfec054ae1d822" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>inline<sp/>constexpr<sp/>bool<sp/>is_Scalar2_v<sp/>=<sp/>is_Scalar2&lt;T&gt;::value;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="336" refid="structh5pp_1_1type_1_1sfinae_1_1is___scalar3" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/>is_Scalar3<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>private:</highlight></codeline>
<codeline lineno="338" refid="structh5pp_1_1type_1_1sfinae_1_1is___scalar3_1a7fd8357c231adaeec942bfbc8dbf23f1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>constexpr<sp/>bool<sp/>test()<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>constexpr(has_x_v&lt;T&gt;<sp/>and<sp/>has_y_v&lt;T&gt;<sp/>and<sp/>has_z_v&lt;T&gt;)<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/>size_t<sp/>t_size<sp/>=<sp/>sizeof(T);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/>size_t<sp/>x_size<sp/>=<sp/>sizeof(T::x);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/>size_t<sp/>y_size<sp/>=<sp/>sizeof(T::y);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/>size_t<sp/>z_size<sp/>=<sp/>sizeof(T::z);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>t_size<sp/>==<sp/>x_size<sp/>+<sp/>y_size<sp/>+<sp/>z_size;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>public:</highlight></codeline>
<codeline lineno="351" refid="structh5pp_1_1type_1_1sfinae_1_1is___scalar3_1aaac31c6001786b20941977d7b0c2c929" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>constexpr<sp/>bool<sp/>value<sp/>=<sp/>test();</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="354" refid="namespaceh5pp_1_1type_1_1sfinae_1a9add46b0ccf93caaddaa359cc9b4dc0d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>inline<sp/>constexpr<sp/>bool<sp/>is_Scalar3_v<sp/>=<sp/>is_Scalar3&lt;T&gt;::value;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T1,<sp/>typename<sp/>T2&gt;</highlight></codeline>
<codeline lineno="357" refid="namespaceh5pp_1_1type_1_1sfinae_1a8192e9591767a6346736ff1503c1b511" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>bool<sp/>is_Scalar2_of_type()<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>constexpr(is_Scalar2_v&lt;T1&gt;)<sp/>return<sp/>std::is_same&lt;decltype(T1::x),<sp/>T2&gt;::value;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="363" refid="namespaceh5pp_1_1type_1_1sfinae_1a23a5df12bfcee63699d7ae88de3a99bd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>bool<sp/>is_ScalarN()<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>is_Scalar2_v&lt;T&gt;<sp/>or<sp/>is_Scalar3_v&lt;T&gt;;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T1,<sp/>typename<sp/>T2&gt;</highlight></codeline>
<codeline lineno="368" refid="namespaceh5pp_1_1type_1_1sfinae_1a85c8913c5580e4880141bd7424c354f7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>bool<sp/>is_Scalar3_of_type()<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>constexpr(is_Scalar3_v&lt;T1&gt;)</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>std::is_same&lt;decltype(T1::x),<sp/>T2&gt;::value;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal">#ifdef<sp/>H5PP_EIGEN3</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>is_eigen_matrix<sp/>=<sp/>std::is_base_of&lt;Eigen::MatrixBase&lt;std::decay_t&lt;T&gt;&gt;,<sp/>std::decay_t&lt;T&gt;&gt;;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>inline<sp/>constexpr<sp/>bool<sp/>is_eigen_matrix_v<sp/>=<sp/>is_eigen_matrix&lt;T&gt;::value;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>is_eigen_array<sp/>=<sp/>std::is_base_of&lt;Eigen::ArrayBase&lt;std::decay_t&lt;T&gt;&gt;,<sp/>std::decay_t&lt;T&gt;&gt;;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>inline<sp/>constexpr<sp/>bool<sp/>is_eigen_array_v<sp/>=<sp/>is_eigen_array&lt;T&gt;::value;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>is_eigen_tensor<sp/>=<sp/>std::is_base_of&lt;Eigen::TensorBase&lt;std::decay_t&lt;T&gt;,<sp/>Eigen::ReadOnlyAccessors&gt;,<sp/>std::decay_t&lt;T&gt;&gt;;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>inline<sp/>constexpr<sp/>bool<sp/>is_eigen_tensor_v<sp/>=<sp/>is_eigen_tensor&lt;T&gt;::value;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>is_eigen_dense<sp/>=<sp/>std::is_base_of&lt;Eigen::DenseBase&lt;std::decay_t&lt;T&gt;&gt;,<sp/>std::decay_t&lt;T&gt;&gt;;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>inline<sp/>constexpr<sp/>bool<sp/>is_eigen_dense_v<sp/>=<sp/>is_eigen_dense&lt;T&gt;::value;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>is_eigen_map<sp/>=<sp/>std::is_base_of&lt;Eigen::MapBase&lt;std::decay_t&lt;T&gt;,<sp/>Eigen::ReadOnlyAccessors&gt;,<sp/>std::decay_t&lt;T&gt;&gt;;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>inline<sp/>constexpr<sp/>bool<sp/>is_eigen_map_v<sp/>=<sp/>is_eigen_map&lt;T&gt;::value;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>is_eigen_plain<sp/>=<sp/>std::is_base_of&lt;Eigen::PlainObjectBase&lt;std::decay_t&lt;T&gt;&gt;,<sp/>std::decay_t&lt;T&gt;&gt;;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>inline<sp/>constexpr<sp/>bool<sp/>is_eigen_plain_v<sp/>=<sp/>is_eigen_plain&lt;T&gt;::value;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>is_eigen_base<sp/>=<sp/>std::is_base_of&lt;Eigen::EigenBase&lt;std::decay_t&lt;T&gt;&gt;,<sp/>std::decay_t&lt;T&gt;&gt;;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>inline<sp/>constexpr<sp/>bool<sp/>is_eigen_base_v<sp/>=<sp/>is_eigen_base&lt;T&gt;::value;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/>is_eigen_core<sp/>:<sp/>public<sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T,<sp/>int<sp/>rows,<sp/>int<sp/>cols,<sp/>int<sp/>StorageOrder&gt;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/>is_eigen_core&lt;Eigen::Matrix&lt;T,<sp/>rows,<sp/>cols,<sp/>StorageOrder&gt;&gt;<sp/>:<sp/>public<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T,<sp/>int<sp/>rows,<sp/>int<sp/>cols,<sp/>int<sp/>StorageOrder&gt;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/>is_eigen_core&lt;Eigen::Array&lt;T,<sp/>rows,<sp/>cols,<sp/>StorageOrder&gt;&gt;<sp/>:<sp/>public<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>inline<sp/>constexpr<sp/>bool<sp/>is_eigen_core_v<sp/>=<sp/>is_eigen_core&lt;T&gt;::value;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/>is_eigen_any<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>constexpr<sp/>bool<sp/>value<sp/>=<sp/>is_eigen_base&lt;T&gt;::value<sp/>or<sp/>is_eigen_tensor&lt;T&gt;::value;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>inline<sp/>constexpr<sp/>bool<sp/>is_eigen_any_v<sp/>=<sp/>is_eigen_any&lt;T&gt;::value;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/>is_eigen_contiguous<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>constexpr<sp/>bool<sp/>value<sp/>=<sp/>is_eigen_any&lt;T&gt;::value<sp/>and<sp/>has_data&lt;T&gt;::value;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>inline<sp/>constexpr<sp/>bool<sp/>is_eigen_contiguous_v<sp/>=<sp/>is_eigen_contiguous&lt;T&gt;::value;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>class<sp/>is_eigen_1d<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>private:</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;typename<sp/>U&gt;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>constexpr<sp/>auto<sp/>test()<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>constexpr(is_eigen_map&lt;U&gt;::value)<sp/>return<sp/>test&lt;typename<sp/>U::PlainObject&gt;();</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>constexpr(is_eigen_dense&lt;U&gt;::value)<sp/>return<sp/>U::RowsAtCompileTime<sp/>==<sp/>1<sp/>or<sp/>U::ColsAtCompileTime<sp/>==<sp/>1;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>constexpr(is_eigen_tensor&lt;U&gt;::value<sp/>and<sp/>has_NumIndices&lt;U&gt;::value)</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>U::NumIndices<sp/>==<sp/>1;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>public:</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>constexpr<sp/>bool<sp/>value<sp/>=<sp/>test&lt;T&gt;();</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>inline<sp/>constexpr<sp/>bool<sp/>is_eigen_1d_v<sp/>=<sp/>is_eigen_1d&lt;T&gt;::value;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>class<sp/>is_eigen_colmajor<sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;typename<sp/>U&gt;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>constexpr<sp/>bool<sp/>test()<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>constexpr(is_eigen_base&lt;U&gt;::value)<sp/>return<sp/>not<sp/>U::IsRowMajor;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>constexpr(is_eigen_tensor&lt;U&gt;::value)</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Eigen::ColMajor<sp/>==<sp/>static_cast&lt;Eigen::StorageOptions&gt;(U::Layout);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>public:</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>constexpr<sp/>bool<sp/>value<sp/>=<sp/>test&lt;T&gt;();</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>inline<sp/>constexpr<sp/>bool<sp/>is_eigen_colmajor_v<sp/>=<sp/>is_eigen_colmajor&lt;T&gt;::value;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>class<sp/>is_eigen_rowmajor<sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;typename<sp/>U&gt;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>constexpr<sp/>bool<sp/>test()<sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>constexpr(is_eigen_base&lt;U&gt;::value)<sp/>return<sp/>U::IsRowMajor;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>constexpr(is_eigen_tensor&lt;U&gt;::value)</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>Eigen::RowMajor<sp/>==<sp/>static_cast&lt;Eigen::StorageOptions&gt;(U::Layout);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>public:</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>constexpr<sp/>bool<sp/>value<sp/>=<sp/>test&lt;T&gt;();</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>inline<sp/>constexpr<sp/>bool<sp/>is_eigen_rowmajor_v<sp/>=<sp/>is_eigen_rowmajor&lt;T&gt;::value;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/david/GitProjects/h5pp/h5pp/include/h5pp/details/h5ppTypeSfinae.h"/>
  </compounddef>
</doxygen>
