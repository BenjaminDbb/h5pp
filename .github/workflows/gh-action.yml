name: Actions

on: [push]
# INSPIRATION https://github.com/onqtam/doctest/pull/285/files/875052e18cf5f5f0b9176e59f847b6205f3efb78#
jobs:
  ci:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Github Actions requires a single row to be added to the build matrix.
        # See https://help.github.com/en/articles/workflow-syntax-for-github-actions.
        name: [ubuntu-16.04-gcc-7,ubuntu-18.04-gcc-9,ubuntu-16.04-clang-6.0,ubuntu-18.04-clang-9, ubuntu-18.04-clang-9-conda,ubuntu-18.04-clang-9-apt, ubuntu-18.04-clang-6.0-conan, windows-2019-msvc-conan,windows-2019-msvc-native]
        include:
          - name: ubuntu-16.04-gcc-7
            os: ubuntu-16.04
            compiler: gcc
            version: "7"
            generator: -G "Unix Makefiles"
            flags: -DDOWNLOAD_METHOD:STRING=native -DBUILD_SHARED_LIBS:BOOL=OFF

          - name: ubuntu-18.04-gcc-9
            os: ubuntu-18.04
            compiler: gcc
            version: "9"
            generator: -G "Unix Makefiles"
            flags: -DDOWNLOAD_METHOD:STRING=native -DBUILD_SHARED_LIBS:BOOL=OFF

          - name: ubuntu-16.04-clang-6.0
            os: ubuntu-16.04
            compiler: clang
            version: "6.0"
            generator: -G "Unix Makefiles"
            flags: -DDOWNLOAD_METHOD:STRING=native -DBUILD_SHARED_LIBS:BOOL=OFF

          - name: ubuntu-18.04-clang-9
            os: ubuntu-18.04
            compiler: clang
            version: "9"
            generator: -G "Unix Makefiles"
            flags: -DDOWNLOAD_METHOD:STRING=native -DBUILD_SHARED_LIBS:BOOL=OFF

          - name: ubuntu-18.04-clang-9-conda
            os: ubuntu-18.04
            compiler: clang
            version: "9"
            generator: -G "Unix Makefiles"
            sources: conda
            conda: spdlog hdf5 hdf5-static eigen
            flags: -DDOWNLOAD_METHOD:STRING=native -DPREFER_CONDA_LIBS:BOOL=ON -DBUILD_SHARED_LIBS:BOOL=OFF

          - name: ubuntu-18.04-clang-9-apt
            os: ubuntu-18.04
            compiler: clang
            version: "9"
            generator: -G "Unix Makefiles"
            sources: apt
            apt: libhdf5-dev libspdlog-dev libeigen3-dev
            flags: -DDOWNLOAD_METHOD:STRING=native -DBUILD_SHARED_LIBS:BOOL=OFF

          - name: ubuntu-18.04-clang-6.0-conan
            os: ubuntu-18.04
            compiler: clang
            version: "6.0"
            generator: -G "Unix Makefiles"
            sources: conda conan
            conda: conan
            flags: -DDOWNLOAD_METHOD:STRING=conan -DBUILD_SHARED_LIBS:BOOL=OFF

          - name: windows-2019-msvc-conan
            os: windows-2019
            compiler: cl
            generator: -G "Visual Studio 16 2019" -A x64
            sources: conan
            flags: -DDOWNLOAD_METHOD:STRING=conan -DBUILD_SHARED_LIBS:BOOL=ON

          - name: windows-2019-msvc-native
            os: windows-2019
            compiler: cl
            sources: native
            generator: -G "Visual Studio 16 2019" -A x64
            flags: -DDOWNLOAD_METHOD:STRING=native -DBUILD_SHARED_LIBS:BOOL=OFF
    steps:
      - uses: actions/checkout@v1
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Install (Linux)
        if: runner.os == 'Linux'
        run: |
          # LLVM 9 is not in Bionic's repositories so we add the official LLVM repository.
          if [ "${{ matrix.compiler }}" = "clang" ] && [ "${{ matrix.version }}" = "9" ]; then
            sudo add-apt-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main"
          fi
          sudo apt-get update
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            sudo apt-get install -y g++-${{ matrix.version }} g++-${{ matrix.version }}-multilib gfortran ${{ matrix.apt }}
            echo "::set-env name=CC::gcc-${{ matrix.version }}"
            echo "::set-env name=CXX::g++-${{ matrix.version }}"
          else
            sudo apt-get install -y clang-${{ matrix.version }} g++-multilib gfortran ${{ matrix.apt }}
            echo "::set-env name=CC::clang-${{ matrix.version }}"
            echo "::set-env name=CXX::clang++-${{ matrix.version }}"
          fi
          echo "::set-env name=FC::gfortran"

          if [[ "${{ matrix.sources }}" == *"conda"* ]]; then
            wget http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -O miniconda.sh
            chmod +x miniconda.sh
            ./miniconda.sh -b -p $HOME/miniconda
            export PATH=$HOME/miniconda/bin:$PATH
            conda update --yes conda
            conda config --add channels conda-forge
            conda install --yes ${{ matrix.conda }}
          fi
          if [[ "${{ matrix.sources }}" == *"conan"* ]]; then
            conan user
          fi
      - name: Install (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
          if ( '${{ matrix.generator }}' -match "Ninja" ){
            scoop install ninja --global
            refreshenv
          }
          if ( "${{ matrix.sources }}" -match "conan" ){
            scoop install conan --global
            refreshenv
          }
          echo "::set-env name=CC::${{ matrix.compiler }}"
          echo "::set-env name=CXX::${{ matrix.compiler }}"
          # Some commands modify the PATH so we make the modified PATH global.
          echo "::set-env name=PATH::$env:PATH"

      - name: Configure
        run: |
          cmake -E make_directory build/Debug
          cd build/Debug
          cmake -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DH5PP_ENABLE_EIGEN3:BOOL=ON -DH5PP_ENABLE_SPDLOG:BOOL=ON -DH5PP_PRINT_INFO:BOOL=ON -DCMAKE_BUILD_TYPE=Debug -DENABLE_TESTS:BOOL=ON -DBUILD_EXAMPLES:BOOL=ON  ${{ matrix.flags }} ${{ matrix.generator }} ../../
          cat CMakeFiles/CMakeError.log

      - name: Build
        shell: bash
        run: |
          cd build/Debug
          cmake --build . --parallel
          cmake --build . --target install
          cat CMakeFiles/CMakeError.log

      - name: Test
        run: |
          cd build/Debug
          ctest -C Debug --output-on-failure



