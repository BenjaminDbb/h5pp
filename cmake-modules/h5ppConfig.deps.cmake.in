@PACKAGE_INIT@

set(DIRECTORY_HINTS                 @PACKAGE_DIRECTORY_HINTS@)
set(PREFER_CONDA_LIBS               @PACKAGE_PREFER_CONDA_LIBS@)
set(CONDA_HINTS                     @PACKAGE_CONDA_HINTS@)

include(CMakeFindDependencyMacro)
if (NOT TARGET Eigen3::Eigen)
    set(PACKAGE_PREFIX_DIR              ${PACKAGE_PREFIX_DIR_SAVED})
    find_dependency(Eigen3 3.3.4
        HINTS ${Eigen3_DIR} ${CONDA_HINTS}
        PATHS ${Eigen3_DIR} ${EIGEN3_ROOT_DIR} ${EIGEN3_INCLUDE_DIR} ${DIRECTORY_HINTS}
        PATH_SUFFIXES Eigen3 eigen3 include/Eigen3 include/eigen3
        NO_CMAKE_PACKAGE_REGISTRY)

endif()


if (NOT TARGET spdlog::spdlog)
    include(GNUInstallDirs)
    set(PACKAGE_PREFIX_DIR              ${PACKAGE_PREFIX_DIR_SAVED})
    set(spdlog_DIR                      "@PACKAGE_spdlog_DIR@")
    find_dependency(spdlog 1.3
            PATHS  ${spdlog_DIR} ${DIRECTORY_HINTS}
            PATH_SUFFIXES ${CMAKE_INSTALL_LIBDIR}/cmake/spdlog spdlog/${CMAKE_INSTALL_LIBDIR}/cmake/spdlog spdlog spdlog/${CMAKE_INSTALL_LIBDIR} spdlog/share spdlog/cmake)
    if(NOT TARGET spdlog::spdlog)
        find_path(SPDLOG_INCLUDE_DIR
                NAMES spdlog/spdlog.h
                HINTS ${spdlog_DIR} ${CONDA_HINTS}
                PATHS /usr /usr/local ${spdlog_DIR} ${DIRECTORY_HINTS})
        # Check for a file in new enough spdlog versions
        find_path(SPDLOG_COLOR_SINKS
                NAMES spdlog/sinks/stdout_color_sinks.h
                PATHS /usr /usr/local ${spdlog_DIR} ${DIRECTORY_HINTS} ${SPDLOG_INCLUDE_DIR})
        if(SPDLOG_INCLUDE_DIR AND SPDLOG_COLOR_SINKS)
            set(spdlog_FOUND TRUE)
            add_library(spdlog::spdlog INTERFACE IMPORTED)
            target_include_directories(spdlog::spdlog INTERFACE ${SPDLOG_INCLUDE_DIR})
        endif()
    endif()
endif()



if (NOT TARGET hdf5::hdf5)
    set(PACKAGE_PREFIX_DIR              ${PACKAGE_PREFIX_DIR_SAVED})
    ##################################################################
    ### Adapt pthread for static/dynamic linking                   ###
    ##################################################################
    set(CMAKE_THREAD_PREFER_PTHREAD TRUE)
    set(THREADS_PREFER_PTHREAD_FLAG FALSE)
    find_package(Threads)
    if(TARGET Threads::Threads AND NOT BUILD_SHARED_LIBS)
        set_target_properties(Threads::Threads PROPERTIES INTERFACE_LINK_LIBRARIES "-Wl,--whole-archive ${CMAKE_THREAD_LIBS_INIT} -Wl,--no-whole-archive")
    endif()

    enable_language(C)
    include(${H5PP_CONFIG_DIR}/FindPackageHDF5.cmake)
    find_package_hdf5()

endif()


