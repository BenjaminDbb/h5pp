@PACKAGE_INIT@


####################################################################
### Append search paths for find_package and find_library calls  ###
####################################################################
if(H5PP_DOWNLOAD_METHOD MATCHES "find|fetch")
    # Append search paths for find_package and find_library calls
    if(H5PP_PREFER_CONDA_LIBS)
        list(APPEND CMAKE_PREFIX_PATH
                $ENV{CONDA_PREFIX}
                $ENV{HOME}/anaconda3
                $ENV{HOME}/anaconda
                $ENV{HOME}/miniconda3
                $ENV{HOME}/miniconda
                $ENV{HOME}/.conda
                )
    endif()
    list(APPEND CMAKE_PREFIX_PATH
            $ENV{EBROOTHDF5}
            $ENV{EBROOTSPDLOG}
            $ENV{EBROOTEIGEN}
            ${HDF5_ROOT}
            $ENV{HDF5_ROOT}
            )

    # This makes sure to use h5pp's own modules to find dependencies!
    list(INSERT CMAKE_MODULE_PATH 0  ${CMAKE_CURRENT_LIST_DIR})
endif()


include(CMakeFindDependencyMacro)
if (NOT TARGET Eigen3::Eigen)
    find_dependency(Eigen3 3.3.4)
    if(TARGET Eigen3 AND NOT TARGET Eigen3::Eigen)
        add_library(Eigen3::Eigen ALIAS Eigen3)
    endif()
endif()
if(TARGET Eigen3::Eigen)
    list(APPEND H5PP_FOUND_TARGETS Eigen3::Eigen)
endif()

if (NOT TARGET spdlog::spdlog)
    find_dependency(spdlog 1.3.1)
    if(TARGET spdlog AND NOT TARGET spdlog::spdlog)
        add_library(spdlog::spdlog ALIAS spdlog)
    endif()
endif()
if(TARGET spdlog::spdlog)
    list(APPEND H5PP_FOUND_TARGETS spdlog::spdlog)
endif()

if (NOT TARGET hdf5::hdf5)
    find_dependency(HDF5 1.8 COMPONENTS C HL REQUIRED)
endif()

if(TARGET hdf5::hdf5)
    list(APPEND H5PP_FOUND_TARGETS  hdf5::hdf5)
endif()

if(NOT H5PP_FIND_QUIETLY)
    message(STATUS "h5pp: Found dependency targets: ${H5PP_FOUND_TARGETS}")
endif()