if(H5PP_PACKAGE_MANAGER MATCHES "fetch")


    if(NOT CMAKE_CXX_STANDARD)
        set(CMAKE_CXX_STANDARD 17)
    endif()
    if(NOT CMAKE_CXX_STANDARD_REQUIRED)
        set(CMAKE_CXX_STANDARD_REQUIRED TRUE)
    endif()
    if(NOT CMAKE_CXX_EXTENSIONS)
        set(CMAKE_CXX_EXTENSIONS FALSE)
    endif()


    if(H5PP_ENABLE_EIGEN3)
        if(NOT TARGET Eigen3::Eigen)
            include(cmake/fetch/FetchEigen3.cmake)
        endif()
        if(TARGET Eigen3::Eigen)
            target_link_libraries(deps INTERFACE Eigen3::Eigen)
        else()
            message(FATAL_ERROR "Failed FetchContent: Eigen3")
        endif()
    endif()

    if(H5PP_ENABLE_FMT)
        if(NOT TARGET fmt::fmt)
            include(cmake/fetch/Fetchfmt.cmake)
        endif()
        if(TARGET fmt::fmt)
            target_link_libraries(deps INTERFACE fmt::fmt)
        else()
            message(FATAL_ERROR "Failed FetchContent: fmt")
        endif()
    endif()

    if(H5PP_ENABLE_SPDLOG)
        if(NOT TARGET spdlog::spdlog)
            include(cmake/fetch/Fetchspdlog.cmake)
        endif()
        if(TARGET spdlog::spdlog)
            target_link_libraries(deps INTERFACE spdlog::spdlog)
        else()
            message(FATAL_ERROR "Failed FetchContent: fmt")
        endif()
    endif()


    # Download HDF5 (and ZLIB and SZIP)
    if(NOT TARGET hdf5::all)
        list(INSERT HDF5_ROOT 0 ${H5PP_DEPS_INSTALL_DIR})
        set(HDF5_NO_SYSTEM_ENVIRONMENT_PATH ON)
        set(HDF5_NO_CMAKE_PACKAGE_REGISTRY ON)
        set(HDF5_NO_CMAKE_SYSTEM_PATH ON)
        set(HDF5_NO_CMAKE_SYSTEM_PACKAGE_REGISTRY ON)
        set(HDF5_FIND_VERBOSE OFF)
        set(HDF5_FIND_DEBUG OFF)
        mark_as_advanced(HDF5_NO_SYSTEM_ENVIRONMENT_PATH)
        mark_as_advanced(HDF5_NO_CMAKE_PACKAGE_REGISTRY)
        mark_as_advanced(HDF5_NO_CMAKE_SYSTEM_PATH)
        mark_as_advanced(HDF5_NO_CMAKE_SYSTEM_PACKAGE_REGISTRY)
        mark_as_advanced(HDF5_FIND_VERBOSE)
        mark_as_advanced(HDF5_FIND_DEBUG)

        find_package(HDF5 1.8 COMPONENTS C HL)
        if(NOT TARGET hdf5::all)
            message(STATUS "HDF5 will be installed into ${H5PP_DEPS_INSTALL_DIR}")
            include(cmake/InstallPackage.cmake)
            find_library(SZIP_LIBRARY NAMES sz  HINTS ${H5PP_DEPS_INSTALL_DIR} PATH_SUFFIXES aec lib aec/lib NO_DEFAULT_PATH)
            find_library(AEC_LIBRARY  NAMES aec HINTS ${H5PP_DEPS_INSTALL_DIR} PATH_SUFFIXES aec lib aec/lib NO_DEFAULT_PATH)
            find_library(ZLIB_LIBRARY NAMES  z  HINTS ${H5PP_DEPS_INSTALL_DIR} PATH_SUFFIXES zlib lib zlib/lib NO_DEFAULT_PATH)
            if(NOT SZIP_LIBRARY OR NOT AEC_LIBRARY)
                install_package(aec "${H5PP_DEPS_INSTALL_DIR}" "")
                find_library(SZIP_LIBRARY NAMES sz  HINTS ${H5PP_DEPS_INSTALL_DIR} PATH_SUFFIXES aec lib aec/lib NO_DEFAULT_PATH REQUIRED)
                find_library(AEC_LIBRARY  NAMES aec HINTS ${H5PP_DEPS_INSTALL_DIR} PATH_SUFFIXES aec lib aec/lib NO_DEFAULT_PATH REQUIRED)
            endif()
            if(NOT ZLIB_LIBRARY)
                install_package(zlib "${H5PP_DEPS_INSTALL_DIR}" "")
                find_library(ZLIB_LIBRARY NAMES  z  HINTS ${H5PP_DEPS_INSTALL_DIR} PATH_SUFFIXES zlib lib zlib/lib NO_DEFAULT_PATH REQUIRED)
            endif()

            list(APPEND H5PP_HDF5_OPTIONS  "-DHDF5_ENABLE_PARALLEL:BOOL=${H5PP_ENABLE_MPI}")
            install_package(hdf5 "${H5PP_DEPS_INSTALL_DIR}" "${H5PP_HDF5_OPTIONS}")
            # This one uses our own module though, but will call the config-mode internally first.
            find_package(HDF5 1.12 COMPONENTS C HL REQUIRED)
            if(TARGET hdf5::all)
                message(STATUS "hdf5 installed successfully")
            endif()
        endif()
        if(TARGET hdf5::all)
            list(APPEND H5PP_TARGETS hdf5::all)
            target_link_libraries(deps INTERFACE hdf5::all)
        else()
            message(FATAL_ERROR "HDF5 could not be downloaded and built from source")
        endif()
    endif()
endif()