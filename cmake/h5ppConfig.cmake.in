@PACKAGE_INIT@

set(h5pp_FOUND TRUE)
set(H5PP_FOUND TRUE)


# Make sure we use h5pp find modules
list(INSERT CMAKE_MODULE_PATH 0 "${CMAKE_CURRENT_LIST_DIR}")
include(CMakeFindDependencyMacro)


########################## IMPORTANT #############################
### Preempt Threads::Threads                                   ###
### It's looked for in dependency configs, so we make it right ###
### before it's done wrong, i.e. with pthread instead of       ###
### -lpthread. If this is undesirable you can preempt it       ###
### yourself similarly. The reason is that downstream I often  ###
### need to avoid a static linking segfault by using:          ###
### -Wl, -whole-archive pthread -Wl, -no-whole-archive         ###
### and cmake is unable to identify "-lpthread" as being the   ###
### same as pthread --> multiple declaration errors. Note that ###
### CMake changes it into                                      ###
### -Wl, -whole-archive -lpthread -Wl, -no-whole-archive       ###
### anyway. If an entire dependency tree had only "-lpthread"  ###
### or only "pthread" this wouldn't be a problem, but          ###
### unfortunately different dependencies do it differently.    ###
### Since conan prefers "pthread", we do the same here.        ###
##################################################################
### Read more about pthread segfault
### https://stackoverflow.com/questions/35116327/when-g-static-link-pthread-cause-segmentation-fault-why
if(NOT TARGET Threads::Threads)
    set(CMAKE_THREAD_PREFER_PTHREAD FALSE)
    set(THREADS_PREFER_PTHREAD_FLAG FALSE)
    find_package(Threads)
    if(CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
        set_target_properties(Threads::Threads PROPERTIES INTERFACE_LINK_LIBRARIES pthread)
    endif()
endif()


include(${CMAKE_CURRENT_LIST_DIR}/h5ppTargets.cmake)
get_target_property(H5PP_DOWNLOAD_METHOD h5pp::deps INTERFACE_COMPILE_DEFINITIONS)
get_target_property(H5PP_ENABLED_TARGETS h5pp::deps INTERFACE_LINK_LIBRARIES)


# h5pp requires the filesystem header (and possibly stdc++fs library)
if(NOT TARGET std::filesystem)
    find_dependency(Filesystem COMPONENTS Final Experimental)
    if (TARGET std::filesystem)
        list(APPEND H5PP_FOUND_TARGETS std::filesystem)
    elseif(H5PP_DOWNLOAD_METHOD MATCHES "fetch|conan")
        message(STATUS "Your compiler lacks std::filesystem. Downloading ghc::filesystem replacement")
        message(STATUS "Read more about ghc::filesystem here: https://github.com/gulrak/filesystem")
        find_dependency(ghcFilesystem)
        if(TARGET ghcFilesystem::ghc_filesystem)
            add_library(std::filesystem INTERFACE IMPORTED)
            target_link_libraries(std::filesystem INTERFACE ghcFilesystem::ghc_filesystem)
            list(APPEND H5PP_FOUND_TARGETS std::filesystem)
        endif()
    else()
        message(WARNING "<filesystem> header and/or library not found\n"
                "Your compiler seems to lack std::filesystem\n"
                "Set H5PP_DOWNLOAD_MODE to 'fetch' or 'conan' to get the ghc::filesystem replacement. "
                "Read more about ghc::filesystem here: https://github.com/gulrak/filesystem\n")
    endif()
endif()




if(H5PP_DOWNLOAD_METHOD MATCHES "conan")
    include(${CMAKE_CURRENT_LIST_DIR}/h5ppConfig.deps-conan.cmake)
endif()
if(H5PP_DOWNLOAD_METHOD MATCHES "find|fetch")
    include(${CMAKE_CURRENT_LIST_DIR}/h5ppConfig.deps-fetch.cmake)
endif()