@PACKAGE_INIT@

set(h5pp_FOUND TRUE)
set(H5PP_FOUND TRUE)


# Make sure we use h5pp find modules
list(INSERT CMAKE_MODULE_PATH 0 "${CMAKE_CURRENT_LIST_DIR}")
include(CMakeFindDependencyMacro)


##################################################################
### Preempt Threads::Threads                                   ###
### It's looked for in dependencies, so we make it right       ###
### before it's done wrong, i.e. with pthread instead of       ###
### -lpthread.                                                 ###
### Otherwise, we get linker errors consuming h5pp             ###
### Here we specify the linking twice                          ###
### 1) As string to make sure -lpthread gets sandwiched by     ###
###    -Wl,--whole-archive.... -Wl,--no-whole-archive          ###
### 2) As usual to make sure that if somebody links            ###
###    Threads::Threads, then any repeated pthread appended    ###
###    to the end (the wrong order causes linking errors)      ###
##################################################################
if(NOT TARGET Threads::Threads)
    set(THREADS_PREFER_PTHREAD_FLAG TRUE)
    find_package(Threads)
endif()


include(${CMAKE_CURRENT_LIST_DIR}/h5ppTargets.cmake)
get_target_property(H5PP_PACKAGE_MANAGER h5pp::deps INTERFACE_COMPILE_DEFINITIONS)
get_target_property(H5PP_ENABLED_TARGETS h5pp::deps INTERFACE_LINK_LIBRARIES)


# h5pp requires the filesystem header (and possibly stdc++fs library)
if(NOT TARGET std::filesystem)
    find_dependency(Filesystem COMPONENTS Final Experimental)
    if (TARGET std::filesystem)
        list(APPEND H5PP_FOUND_TARGETS std::filesystem)
    elseif(H5PP_PACKAGE_MANAGER MATCHES "cmake|conan")
        message(STATUS "Your compiler lacks std::filesystem. Downloading ghc::filesystem replacement")
        message(STATUS "Read more about ghc::filesystem here: https://github.com/gulrak/filesystem")
        find_dependency(ghcFilesystem)
        if(TARGET ghcFilesystem::ghc_filesystem)
            add_library(std::filesystem INTERFACE IMPORTED)
            target_link_libraries(std::filesystem INTERFACE ghcFilesystem::ghc_filesystem)
            list(APPEND H5PP_FOUND_TARGETS std::filesystem)
        endif()
    else()
        message(WARNING "<filesystem> header and/or library not found\n"
                "Your compiler seems to lack std::filesystem\n"
                "Set H5PP_PACKAGE_MANAGER to 'find-or-cmake', 'cmake' or 'conan' to get the ghc::filesystem replacement. "
                "Read more about ghc::filesystem here: https://github.com/gulrak/filesystem\n")
    endif()
endif()




if(H5PP_PACKAGE_MANAGER MATCHES "conan")
    include(${CMAKE_CURRENT_LIST_DIR}/h5ppConfig.deps-conan.cmake)
endif()
if(H5PP_PACKAGE_MANAGER MATCHES "find|cmake")
    include(${CMAKE_CURRENT_LIST_DIR}/h5ppConfig.deps-cmake.cmake)
endif()