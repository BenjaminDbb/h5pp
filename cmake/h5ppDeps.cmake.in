@PACKAGE_INIT@

include(CMakeFindDependencyMacro)


# Make sure we use the bundled find modules
list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR})

# Determine which dependencies to look for
get_target_property(H5PP_LINK_LIBRARIES h5pp::deps INTERFACE_LINK_LIBRARIES)

if (H5PP_ENABLE_MPI OR MPI::MPI_CXX IN_LIST H5PP_LINK_LIBRARIES)
    if(NOT WIN32)
        find_dependency(MPI REQUIRED)
    endif()
endif ()

# h5pp requires the filesystem header (and possibly stdc++fs library)
if(std::filesystem IN_LIST H5PP_LINK_LIBRARIES)
    find_package(Filesystem COMPONENTS Final Experimental REQUIRED)
endif()

if (H5PP_ENABLE_EIGEN3 OR Eigen3::Eigen IN_LIST H5PP_LINK_LIBRARIES)
    find_dependency(Eigen3 3.3 REQUIRED)
    if(TARGET Eigen3 AND NOT TARGET Eigen3::Eigen)
        add_library(Eigen3::Eigen ALIAS Eigen3)
    endif()
    if(NOT Eigen3::Eigen IN_LIST H5PP_LINK_LIBRARIES)
        target_link_libraries(h5pp::deps INTERFACE Eigen3::Eigen)
    endif()
    target_compile_definitions(h5pp::deps INTERFACE H5PP_USE_EIGEN3)
endif()

if (H5PP_ENABLE_FMT OR fmt::fmt IN_LIST H5PP_LINK_LIBRARIES)
    find_dependency(fmt 6.1.2 REQUIRED)
    if(TARGET fmt AND NOT TARGET fmt::fmt)
        add_library(fmt::fmt ALIAS fmt)
    endif()
    if(NOT fmt::fmt IN_LIST H5PP_LINK_LIBRARIES)
        target_link_libraries(h5pp::deps INTERFACE fmt::fmt)
    endif()
    target_compile_definitions(h5pp::deps INTERFACE H5PP_USE_FMT)
endif()

if (H5PP_ENABLE_SPDLOG OR spdlog::spdlog IN_LIST H5PP_LINK_LIBRARIES)
    find_dependency(spdlog 1.5.0 REQUIRED)
    if(TARGET spdlog AND NOT TARGET spdlog::spdlog)
        add_library(spdlog::spdlog ALIAS spdlog)
    endif()
    if(NOT spdlog::spdlog IN_LIST H5PP_LINK_LIBRARIES)
        target_link_libraries(h5pp::deps INTERFACE spdlog::spdlog)
    endif()
    target_compile_definitions(h5pp::deps INTERFACE H5PP_USE_SPDLOG)
endif()

# HDF5 must be found either way, so set it to required
if(CMAKE_VERSION VERSION_GREATER_EQUAL 3.19)
    find_dependency(HDF5 1.8...1.13 COMPONENTS C HL REQUIRED)
else()
    # h5pp is compatible with 1.8 to 1.13, however, builds from source will reject
    # new versions if we set the version to 1.8 (minimum) here.
    find_dependency(HDF5 COMPONENTS C HL REQUIRED)
endif()


if(HDF5_FOUND AND HDF5::HDF5 IN_LIST H5PP_LINK_LIBRARIES)
    include(${CMAKE_CURRENT_LIST_DIR}/HDF5TargetUtils.cmake)
    h5pp_get_modern_hdf5_target_name()
    get_target_property(H5PP_HDF5_LINK_LIBRARIES HDF5::HDF5 INTERFACE_LINK_LIBRARIES)
    foreach(hdf5_link_lib ${H5PP_HDF5_LINK_LIBRARIES})
        get_target_property(H5PP_HDF5_DEP_LINK_LIBRARIES ${hdf5_link_lib} INTERFACE_LINK_LIBRARIES)
        foreach(hdf5_dep_link_lib ${H5PP_HDF5_DEP_LINK_LIBRARIES})
            if(${hdf5_dep_link_lib} MATCHES "ZLIB::ZLIB" AND NOT TARGET ZLIB::ZLIB)
                find_dependency(ZLIB REQUIRED)
            endif()
            if(${hdf5_dep_link_lib} MATCHES "zlib-static" AND NOT TARGET zlib-static)
                find_dependency(ZLIB NAMES zlib COMPONENTS static REQUIRED)
            endif()
            if(${hdf5_dep_link_lib} MATCHES "szip-static" AND NOT TARGET szip-static)
                find_dependency(SZIP NAMES szip
                            PATH_SUFFIXES cmake share/cmake # Fixes bug in CMake 3.20.2 not generating search paths
                            COMPONENTS static REQUIRED)
            endif()
            if(${hdf5_dep_link_lib} MATCHES "Threads::Threads" AND NOT TARGET Threads::Threads)
                set(THREADS_PREFER_PTHREAD_FLAG TRUE)
                find_dependency(Threads REQUIRED)
            endif()
        endforeach()
    endforeach()
endif()

